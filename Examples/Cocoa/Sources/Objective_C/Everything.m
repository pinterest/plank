//
//  Everything.m
//  Autogenerated by plank
//
//  DO NOT EDIT - EDITS WILL BE OVERWRITTEN
//  @generated
//

#import "Board.h"
#import "Everything.h"
#import "Image.h"
#import "Pin.h"
#import "User.h"

@interface EverythingMapPolymorphicValues ()
@property (nonatomic, assign, readwrite) EverythingMapPolymorphicValuesInternalType internalType;
@property (nonatomic, strong, readwrite) User * value0;
@property (nonatomic, strong, readwrite) Board * value1;
@property (nonatomic, strong, readwrite) Image * value2;
@property (nonatomic, strong, readwrite) Pin * value3;
@property (nonatomic, strong, readwrite) Everything * value4;
@property (nonatomic, strong, readwrite) NSArray * value5;
@property (nonatomic, strong, readwrite) NSDictionary * value6;
@end

@implementation EverythingMapPolymorphicValues
+ (instancetype)objectWithUser:(User *)user
{
    EverythingMapPolymorphicValues *obj = [[EverythingMapPolymorphicValues alloc] init];
    obj.value0 = user;
    obj.internalType = EverythingMapPolymorphicValuesInternalTypeUser;
    return obj;
}
+ (instancetype)objectWithBoard:(Board *)board
{
    EverythingMapPolymorphicValues *obj = [[EverythingMapPolymorphicValues alloc] init];
    obj.value1 = board;
    obj.internalType = EverythingMapPolymorphicValuesInternalTypeBoard;
    return obj;
}
+ (instancetype)objectWithImage:(Image *)image
{
    EverythingMapPolymorphicValues *obj = [[EverythingMapPolymorphicValues alloc] init];
    obj.value2 = image;
    obj.internalType = EverythingMapPolymorphicValuesInternalTypeImage;
    return obj;
}
+ (instancetype)objectWithPin:(Pin *)pin
{
    EverythingMapPolymorphicValues *obj = [[EverythingMapPolymorphicValues alloc] init];
    obj.value3 = pin;
    obj.internalType = EverythingMapPolymorphicValuesInternalTypePin;
    return obj;
}
+ (instancetype)objectWithEverything:(Everything *)everything
{
    EverythingMapPolymorphicValues *obj = [[EverythingMapPolymorphicValues alloc] init];
    obj.value4 = everything;
    obj.internalType = EverythingMapPolymorphicValuesInternalTypeEverything;
    return obj;
}
+ (instancetype)objectWithArray:(NSArray *)array
{
    EverythingMapPolymorphicValues *obj = [[EverythingMapPolymorphicValues alloc] init];
    obj.value5 = array;
    obj.internalType = EverythingMapPolymorphicValuesInternalTypeArray;
    return obj;
}
+ (instancetype)objectWithDictionary:(NSDictionary *)dictionary
{
    EverythingMapPolymorphicValues *obj = [[EverythingMapPolymorphicValues alloc] init];
    obj.value6 = dictionary;
    obj.internalType = EverythingMapPolymorphicValuesInternalTypeDictionary;
    return obj;
}
- (void)matchUser:(nullable PLANK_NOESCAPE void (^)(User * user))userMatchHandler orBoard:(nullable PLANK_NOESCAPE void (^)(Board * board))boardMatchHandler orImage:(nullable PLANK_NOESCAPE void (^)(Image * image))imageMatchHandler orPin:(nullable PLANK_NOESCAPE void (^)(Pin * pin))pinMatchHandler orEverything:(nullable PLANK_NOESCAPE void (^)(Everything * everything))everythingMatchHandler orArray:(nullable PLANK_NOESCAPE void (^)(NSArray * array))arrayMatchHandler orDictionary:(nullable PLANK_NOESCAPE void (^)(NSDictionary * dictionary))dictionaryMatchHandler
{
    switch (self.internalType) {
    case EverythingMapPolymorphicValuesInternalTypeUser:
        if (userMatchHandler != NULL) {
            userMatchHandler(self.value0);
        }
        break;
    case EverythingMapPolymorphicValuesInternalTypeBoard:
        if (boardMatchHandler != NULL) {
            boardMatchHandler(self.value1);
        }
        break;
    case EverythingMapPolymorphicValuesInternalTypeImage:
        if (imageMatchHandler != NULL) {
            imageMatchHandler(self.value2);
        }
        break;
    case EverythingMapPolymorphicValuesInternalTypePin:
        if (pinMatchHandler != NULL) {
            pinMatchHandler(self.value3);
        }
        break;
    case EverythingMapPolymorphicValuesInternalTypeEverything:
        if (everythingMatchHandler != NULL) {
            everythingMatchHandler(self.value4);
        }
        break;
    case EverythingMapPolymorphicValuesInternalTypeArray:
        if (arrayMatchHandler != NULL) {
            arrayMatchHandler(self.value5);
        }
        break;
    case EverythingMapPolymorphicValuesInternalTypeDictionary:
        if (dictionaryMatchHandler != NULL) {
            dictionaryMatchHandler(self.value6);
        }
        break;
    }
}
- (BOOL)isEqual:(id)anObject
{
    if (self == anObject) {
        return YES;
    }
    if ([anObject isKindOfClass:[EverythingMapPolymorphicValues class]] == NO) {
        return NO;
    }
    return [self isEqualToEverythingMapPolymorphicValues:anObject];
}
- (BOOL)isEqualToEverythingMapPolymorphicValues:(EverythingMapPolymorphicValues *)anObject
{
    return (
        (anObject != nil) &&
        (_internalType == anObject.internalType) &&
        (_value0 == anObject.value0 || [_value0 isEqual:anObject.value0]) &&
        (_value1 == anObject.value1 || [_value1 isEqual:anObject.value1]) &&
        (_value2 == anObject.value2 || [_value2 isEqual:anObject.value2]) &&
        (_value3 == anObject.value3 || [_value3 isEqual:anObject.value3]) &&
        (_value4 == anObject.value4 || [_value4 isEqual:anObject.value4]) &&
        (_value5 == anObject.value5 || [_value5 isEqualToArray:anObject.value5]) &&
        (_value6 == anObject.value6 || [_value6 isEqualToDictionary:anObject.value6])
    );
}
- (NSUInteger)hash
{
    NSUInteger subhashes[] = {
        17,
        (NSUInteger)_internalType,
        [_value0 hash],
        [_value1 hash],
        [_value2 hash],
        [_value3 hash],
        [_value4 hash],
        [_value5 hash],
        [_value6 hash]
    };
    return PINIntegerArrayHash(subhashes, sizeof(subhashes) / sizeof(subhashes[0]));
}
- (id)dictionaryObjectRepresentation
{
    switch (self.internalType) {
    case EverythingMapPolymorphicValuesInternalTypeUser:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:[_value0 dictionaryObjectRepresentation] forKey:@"value0"];
            return resultDict[@"value0"];
        }
        break;
    case EverythingMapPolymorphicValuesInternalTypeBoard:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:[_value1 dictionaryObjectRepresentation] forKey:@"value1"];
            return resultDict[@"value1"];
        }
        break;
    case EverythingMapPolymorphicValuesInternalTypeImage:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:[_value2 dictionaryObjectRepresentation] forKey:@"value2"];
            return resultDict[@"value2"];
        }
        break;
    case EverythingMapPolymorphicValuesInternalTypePin:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:[_value3 dictionaryObjectRepresentation] forKey:@"value3"];
            return resultDict[@"value3"];
        }
        break;
    case EverythingMapPolymorphicValuesInternalTypeEverything:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:[_value4 dictionaryObjectRepresentation] forKey:@"value4"];
            return resultDict[@"value4"];
        }
        break;
    case EverythingMapPolymorphicValuesInternalTypeArray:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:_value5 forKey:@"value5"];
            return resultDict[@"value5"];
        }
        break;
    case EverythingMapPolymorphicValuesInternalTypeDictionary:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:_value6 forKey:@"value6"];
            return resultDict[@"value6"];
        }
        break;
    }
}
#pragma mark - NSCopying
- (id)copyWithZone:(NSZone *)zone
{
    return self;
}
#pragma mark - NSSecureCoding
+ (BOOL)supportsSecureCoding
{
    return YES;
}
- (instancetype)initWithCoder:(NSCoder *)aDecoder
{
    if (!(self = [super init])) {
        return self;
    }
    _internalType = [aDecoder decodeIntegerForKey:@"internal_type"];
    _value0 = [aDecoder decodeObjectOfClass:[User class] forKey:@"value0"];
    _value1 = [aDecoder decodeObjectOfClass:[Board class] forKey:@"value1"];
    _value2 = [aDecoder decodeObjectOfClass:[Image class] forKey:@"value2"];
    _value3 = [aDecoder decodeObjectOfClass:[Pin class] forKey:@"value3"];
    _value4 = [aDecoder decodeObjectOfClass:[Everything class] forKey:@"value4"];
    _value5 = [aDecoder decodeObjectOfClass:[NSArray class] forKey:@"value5"];
    _value6 = [aDecoder decodeObjectOfClass:[NSDictionary class] forKey:@"value6"];
    return self;
}
- (void)encodeWithCoder:(NSCoder *)aCoder
{
    [aCoder encodeInteger:self.internalType forKey:@"internal_type"];
    [aCoder encodeObject:self.value0 forKey:@"value0"];
    [aCoder encodeObject:self.value1 forKey:@"value1"];
    [aCoder encodeObject:self.value2 forKey:@"value2"];
    [aCoder encodeObject:self.value3 forKey:@"value3"];
    [aCoder encodeObject:self.value4 forKey:@"value4"];
    [aCoder encodeObject:self.value5 forKey:@"value5"];
    [aCoder encodeObject:self.value6 forKey:@"value6"];
}
@end

@interface EverythingPolymorphicProp ()
@property (nonatomic, assign, readwrite) EverythingPolymorphicPropInternalType internalType;
@property (nonatomic, strong, readwrite) User * value0;
@property (nonatomic, strong, readwrite) Board * value1;
@property (nonatomic, strong, readwrite) Image * value2;
@property (nonatomic, strong, readwrite) Pin * value3;
@property (nonatomic, strong, readwrite) Everything * value4;
@property (nonatomic, copy, readwrite) NSString * value5;
@property (nonatomic, assign, readwrite) BOOL value6;
@property (nonatomic, assign, readwrite) NSInteger value7;
@property (nonatomic, assign, readwrite) double value8;
@property (nonatomic, copy, readwrite) NSDate * value9;
@property (nonatomic, copy, readwrite) NSURL * value10;
@end

@implementation EverythingPolymorphicProp
+ (instancetype)objectWithUser:(User *)user
{
    EverythingPolymorphicProp *obj = [[EverythingPolymorphicProp alloc] init];
    obj.value0 = user;
    obj.internalType = EverythingPolymorphicPropInternalTypeUser;
    return obj;
}
+ (instancetype)objectWithBoard:(Board *)board
{
    EverythingPolymorphicProp *obj = [[EverythingPolymorphicProp alloc] init];
    obj.value1 = board;
    obj.internalType = EverythingPolymorphicPropInternalTypeBoard;
    return obj;
}
+ (instancetype)objectWithImage:(Image *)image
{
    EverythingPolymorphicProp *obj = [[EverythingPolymorphicProp alloc] init];
    obj.value2 = image;
    obj.internalType = EverythingPolymorphicPropInternalTypeImage;
    return obj;
}
+ (instancetype)objectWithPin:(Pin *)pin
{
    EverythingPolymorphicProp *obj = [[EverythingPolymorphicProp alloc] init];
    obj.value3 = pin;
    obj.internalType = EverythingPolymorphicPropInternalTypePin;
    return obj;
}
+ (instancetype)objectWithEverything:(Everything *)everything
{
    EverythingPolymorphicProp *obj = [[EverythingPolymorphicProp alloc] init];
    obj.value4 = everything;
    obj.internalType = EverythingPolymorphicPropInternalTypeEverything;
    return obj;
}
+ (instancetype)objectWithString:(NSString *)string
{
    EverythingPolymorphicProp *obj = [[EverythingPolymorphicProp alloc] init];
    obj.value5 = string;
    obj.internalType = EverythingPolymorphicPropInternalTypeString;
    return obj;
}
+ (instancetype)objectWithBoolean:(BOOL)boolean
{
    EverythingPolymorphicProp *obj = [[EverythingPolymorphicProp alloc] init];
    obj.value6 = boolean;
    obj.internalType = EverythingPolymorphicPropInternalTypeBoolean;
    return obj;
}
+ (instancetype)objectWithInteger:(NSInteger)integer
{
    EverythingPolymorphicProp *obj = [[EverythingPolymorphicProp alloc] init];
    obj.value7 = integer;
    obj.internalType = EverythingPolymorphicPropInternalTypeInteger;
    return obj;
}
+ (instancetype)objectWithFloat:(double)floatProperty
{
    EverythingPolymorphicProp *obj = [[EverythingPolymorphicProp alloc] init];
    obj.value8 = floatProperty;
    obj.internalType = EverythingPolymorphicPropInternalTypeFloat;
    return obj;
}
+ (instancetype)objectWithDate:(NSDate *)date
{
    EverythingPolymorphicProp *obj = [[EverythingPolymorphicProp alloc] init];
    obj.value9 = date;
    obj.internalType = EverythingPolymorphicPropInternalTypeDate;
    return obj;
}
+ (instancetype)objectWithURL:(NSURL *)uRL
{
    EverythingPolymorphicProp *obj = [[EverythingPolymorphicProp alloc] init];
    obj.value10 = uRL;
    obj.internalType = EverythingPolymorphicPropInternalTypeURL;
    return obj;
}
- (void)matchUser:(nullable PLANK_NOESCAPE void (^)(User * user))userMatchHandler orBoard:(nullable PLANK_NOESCAPE void (^)(Board * board))boardMatchHandler orImage:(nullable PLANK_NOESCAPE void (^)(Image * image))imageMatchHandler orPin:(nullable PLANK_NOESCAPE void (^)(Pin * pin))pinMatchHandler orEverything:(nullable PLANK_NOESCAPE void (^)(Everything * everything))everythingMatchHandler orString:(nullable PLANK_NOESCAPE void (^)(NSString * string))stringMatchHandler orBoolean:(nullable PLANK_NOESCAPE void (^)(BOOL boolean))booleanMatchHandler orInteger:(nullable PLANK_NOESCAPE void (^)(NSInteger integer))integerMatchHandler orFloat:(nullable PLANK_NOESCAPE void (^)(double floatProperty))floatPropertyMatchHandler orDate:(nullable PLANK_NOESCAPE void (^)(NSDate * date))dateMatchHandler orURL:(nullable PLANK_NOESCAPE void (^)(NSURL * uRL))uRLMatchHandler
{
    switch (self.internalType) {
    case EverythingPolymorphicPropInternalTypeUser:
        if (userMatchHandler != NULL) {
            userMatchHandler(self.value0);
        }
        break;
    case EverythingPolymorphicPropInternalTypeBoard:
        if (boardMatchHandler != NULL) {
            boardMatchHandler(self.value1);
        }
        break;
    case EverythingPolymorphicPropInternalTypeImage:
        if (imageMatchHandler != NULL) {
            imageMatchHandler(self.value2);
        }
        break;
    case EverythingPolymorphicPropInternalTypePin:
        if (pinMatchHandler != NULL) {
            pinMatchHandler(self.value3);
        }
        break;
    case EverythingPolymorphicPropInternalTypeEverything:
        if (everythingMatchHandler != NULL) {
            everythingMatchHandler(self.value4);
        }
        break;
    case EverythingPolymorphicPropInternalTypeString:
        if (stringMatchHandler != NULL) {
            stringMatchHandler(self.value5);
        }
        break;
    case EverythingPolymorphicPropInternalTypeBoolean:
        if (booleanMatchHandler != NULL) {
            booleanMatchHandler(self.value6);
        }
        break;
    case EverythingPolymorphicPropInternalTypeInteger:
        if (integerMatchHandler != NULL) {
            integerMatchHandler(self.value7);
        }
        break;
    case EverythingPolymorphicPropInternalTypeFloat:
        if (floatPropertyMatchHandler != NULL) {
            floatPropertyMatchHandler(self.value8);
        }
        break;
    case EverythingPolymorphicPropInternalTypeDate:
        if (dateMatchHandler != NULL) {
            dateMatchHandler(self.value9);
        }
        break;
    case EverythingPolymorphicPropInternalTypeURL:
        if (uRLMatchHandler != NULL) {
            uRLMatchHandler(self.value10);
        }
        break;
    }
}
- (BOOL)isEqual:(id)anObject
{
    if (self == anObject) {
        return YES;
    }
    if ([anObject isKindOfClass:[EverythingPolymorphicProp class]] == NO) {
        return NO;
    }
    return [self isEqualToEverythingPolymorphicProp:anObject];
}
- (BOOL)isEqualToEverythingPolymorphicProp:(EverythingPolymorphicProp *)anObject
{
    return (
        (anObject != nil) &&
        (_value8 == anObject.value8) &&
        (_value7 == anObject.value7) &&
        (_value6 == anObject.value6) &&
        (_internalType == anObject.internalType) &&
        (_value0 == anObject.value0 || [_value0 isEqual:anObject.value0]) &&
        (_value1 == anObject.value1 || [_value1 isEqual:anObject.value1]) &&
        (_value10 == anObject.value10 || [_value10 isEqual:anObject.value10]) &&
        (_value2 == anObject.value2 || [_value2 isEqual:anObject.value2]) &&
        (_value3 == anObject.value3 || [_value3 isEqual:anObject.value3]) &&
        (_value4 == anObject.value4 || [_value4 isEqual:anObject.value4]) &&
        (_value5 == anObject.value5 || [_value5 isEqualToString:anObject.value5]) &&
        (_value9 == anObject.value9 || [_value9 isEqualToDate:anObject.value9])
    );
}
- (NSUInteger)hash
{
    NSUInteger subhashes[] = {
        17,
        (NSUInteger)_internalType,
        [_value0 hash],
        [_value1 hash],
        [_value10 hash],
        [_value2 hash],
        [_value3 hash],
        [_value4 hash],
        [_value5 hash],
        (_value6 ? 1231 : 1237),
        (NSUInteger)_value7,
         [@(_value8) hash],
        [_value9 hash]
    };
    return PINIntegerArrayHash(subhashes, sizeof(subhashes) / sizeof(subhashes[0]));
}
- (id)dictionaryObjectRepresentation
{
    switch (self.internalType) {
    case EverythingPolymorphicPropInternalTypeUser:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:[_value0 dictionaryObjectRepresentation] forKey:@"value0"];
            return resultDict[@"value0"];
        }
        break;
    case EverythingPolymorphicPropInternalTypeBoard:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:[_value1 dictionaryObjectRepresentation] forKey:@"value1"];
            return resultDict[@"value1"];
        }
        break;
    case EverythingPolymorphicPropInternalTypeImage:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:[_value2 dictionaryObjectRepresentation] forKey:@"value2"];
            return resultDict[@"value2"];
        }
        break;
    case EverythingPolymorphicPropInternalTypePin:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:[_value3 dictionaryObjectRepresentation] forKey:@"value3"];
            return resultDict[@"value3"];
        }
        break;
    case EverythingPolymorphicPropInternalTypeEverything:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:[_value4 dictionaryObjectRepresentation] forKey:@"value4"];
            return resultDict[@"value4"];
        }
        break;
    case EverythingPolymorphicPropInternalTypeString:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:_value5 forKey:@"value5"];
            return resultDict[@"value5"];
        }
        break;
    case EverythingPolymorphicPropInternalTypeBoolean:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:@(_value6) forKey: @"value6"];
            return resultDict[@"value6"];
        }
        break;
    case EverythingPolymorphicPropInternalTypeInteger:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:@(_value7) forKey: @"value7"];
            return resultDict[@"value7"];
        }
        break;
    case EverythingPolymorphicPropInternalTypeFloat:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:@(_value8) forKey: @"value8"];
            return resultDict[@"value8"];
        }
        break;
    case EverythingPolymorphicPropInternalTypeDate:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            NSValueTransformer *valueTransformer = [NSValueTransformer valueTransformerForName:kPlankDateValueTransformerKey];
            if ([[valueTransformer class] allowsReverseTransformation]) {
                [resultDict setObject:[valueTransformer reverseTransformedValue:_value9] forKey:@"value9"];
            } else {
                [resultDict setObject:[NSNull null] forKey:@"value9"];
            }
            return resultDict[@"value9"];
        }
        break;
    case EverythingPolymorphicPropInternalTypeURL:
        {
            NSMutableDictionary *resultDict = [[NSMutableDictionary alloc] init];
            [resultDict setObject:[_value10 absoluteString] forKey:@"value10"];
            return resultDict[@"value10"];
        }
        break;
    }
}
#pragma mark - NSCopying
- (id)copyWithZone:(NSZone *)zone
{
    return self;
}
#pragma mark - NSSecureCoding
+ (BOOL)supportsSecureCoding
{
    return YES;
}
- (instancetype)initWithCoder:(NSCoder *)aDecoder
{
    if (!(self = [super init])) {
        return self;
    }
    _internalType = [aDecoder decodeIntegerForKey:@"internal_type"];
    _value0 = [aDecoder decodeObjectOfClass:[User class] forKey:@"value0"];
    _value1 = [aDecoder decodeObjectOfClass:[Board class] forKey:@"value1"];
    _value10 = [aDecoder decodeObjectOfClass:[NSURL class] forKey:@"value10"];
    _value2 = [aDecoder decodeObjectOfClass:[Image class] forKey:@"value2"];
    _value3 = [aDecoder decodeObjectOfClass:[Pin class] forKey:@"value3"];
    _value4 = [aDecoder decodeObjectOfClass:[Everything class] forKey:@"value4"];
    _value5 = [aDecoder decodeObjectOfClass:[NSString class] forKey:@"value5"];
    _value6 = [aDecoder decodeBoolForKey:@"value6"];
    _value7 = [aDecoder decodeIntegerForKey:@"value7"];
    _value8 = [aDecoder decodeDoubleForKey:@"value8"];
    _value9 = [aDecoder decodeObjectOfClass:[NSDate class] forKey:@"value9"];
    return self;
}
- (void)encodeWithCoder:(NSCoder *)aCoder
{
    [aCoder encodeInteger:self.internalType forKey:@"internal_type"];
    [aCoder encodeObject:self.value0 forKey:@"value0"];
    [aCoder encodeObject:self.value1 forKey:@"value1"];
    [aCoder encodeObject:self.value10 forKey:@"value10"];
    [aCoder encodeObject:self.value2 forKey:@"value2"];
    [aCoder encodeObject:self.value3 forKey:@"value3"];
    [aCoder encodeObject:self.value4 forKey:@"value4"];
    [aCoder encodeObject:self.value5 forKey:@"value5"];
    [aCoder encodeBool:self.value6 forKey:@"value6"];
    [aCoder encodeInteger:self.value7 forKey:@"value7"];
    [aCoder encodeDouble:self.value8 forKey:@"value8"];
    [aCoder encodeObject:self.value9 forKey:@"value9"];
}
@end

struct EverythingDirtyProperties {
    unsigned int EverythingDirtyPropertyArrayProp:1;
    unsigned int EverythingDirtyPropertyBooleanProp:1;
    unsigned int EverythingDirtyPropertyDateProp:1;
    unsigned int EverythingDirtyPropertyIntEnum:1;
    unsigned int EverythingDirtyPropertyIntProp:1;
    unsigned int EverythingDirtyPropertyListPolymorphicValues:1;
    unsigned int EverythingDirtyPropertyListWithListAndOtherModelValues:1;
    unsigned int EverythingDirtyPropertyListWithMapAndOtherModelValues:1;
    unsigned int EverythingDirtyPropertyListWithObjectValues:1;
    unsigned int EverythingDirtyPropertyListWithOtherModelValues:1;
    unsigned int EverythingDirtyPropertyListWithPrimitiveValues:1;
    unsigned int EverythingDirtyPropertyMapPolymorphicValues:1;
    unsigned int EverythingDirtyPropertyMapProp:1;
    unsigned int EverythingDirtyPropertyMapWithListAndOtherModelValues:1;
    unsigned int EverythingDirtyPropertyMapWithMapAndOtherModelValues:1;
    unsigned int EverythingDirtyPropertyMapWithObjectValues:1;
    unsigned int EverythingDirtyPropertyMapWithOtherModelValues:1;
    unsigned int EverythingDirtyPropertyMapWithPrimitiveValues:1;
    unsigned int EverythingDirtyPropertyNumberProp:1;
    unsigned int EverythingDirtyPropertyOtherModelProp:1;
    unsigned int EverythingDirtyPropertyPolymorphicProp:1;
    unsigned int EverythingDirtyPropertySetProp:1;
    unsigned int EverythingDirtyPropertySetPropWithOtherModelValues:1;
    unsigned int EverythingDirtyPropertySetPropWithPrimitiveValues:1;
    unsigned int EverythingDirtyPropertySetPropWithValues:1;
    unsigned int EverythingDirtyPropertyStringEnum:1;
    unsigned int EverythingDirtyPropertyStringProp:1;
    unsigned int EverythingDirtyPropertyType:1;
    unsigned int EverythingDirtyPropertyUriProp:1;
};

@interface Everything ()
@property (nonatomic, assign, readwrite) struct EverythingDirtyProperties everythingDirtyProperties;
@end

@interface EverythingBuilder ()
@property (nonatomic, assign, readwrite) struct EverythingDirtyProperties everythingDirtyProperties;
@end

extern NSString * _Nonnull EverythingStringEnumToString(EverythingStringEnum enumType)
{
    switch (enumType) {
    case EverythingStringEnumCase1:
        return @"case1";
        break;
    case EverythingStringEnumCase2:
        return @"case2";
        break;
    case EverythingStringEnumCase3:
        return @"case3";
        break;
    }
}

extern EverythingStringEnum EverythingStringEnumFromString(NSString * _Nonnull str)
{
    if ([str isEqualToString:@"case1"]) {
        return EverythingStringEnumCase1;
    }
    if ([str isEqualToString:@"case2"]) {
        return EverythingStringEnumCase2;
    }
    if ([str isEqualToString:@"case3"]) {
        return EverythingStringEnumCase3;
    }
    return EverythingStringEnumCase1;
}

@implementation Everything
+ (NSString *)className
{
    return @"Everything";
}
+ (NSString *)polymorphicTypeIdentifier
{
    return @"everything";
}
+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dictionary
{
    return [[self alloc] initWithModelDictionary:dictionary];
}
- (instancetype)init
{
    return [self initWithModelDictionary:@{}];
}
- (instancetype)initWithModelDictionary:(NS_VALID_UNTIL_END_OF_SCOPE NSDictionary *)modelDictionary
{
    NSParameterAssert(modelDictionary);
    if (!modelDictionary) {
        return self;
    }
    if (!(self = [super init])) {
        return self;
    }
        {
            __unsafe_unretained id value = modelDictionary[@"array_prop"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_arrayProp = value;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyArrayProp = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"boolean_prop"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_booleanProp = [value boolValue];
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyBooleanProp = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"date_prop"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_dateProp = [[NSValueTransformer valueTransformerForName:kPlankDateValueTransformerKey] transformedValue:value];
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyDateProp = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"int_enum"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_intEnum = [value integerValue];
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyIntEnum = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"int_prop"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_intProp = [value integerValue];
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyIntProp = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"list_polymorphic_values"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_listPolymorphicValues = value;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyListPolymorphicValues = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"list_with_list_and_other_model_values"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    NSArray *items = value;
                    NSMutableArray *result0 = [NSMutableArray arrayWithCapacity:items.count];
                    for (id obj0 in items) {
                        if (obj0 != (id)kCFNull) {
                            id tmp0 = nil;
                            NSArray *items = obj0;
                            NSMutableArray *result1 = [NSMutableArray arrayWithCapacity:items.count];
                            for (id obj1 in items) {
                                if (obj1 != (id)kCFNull) {
                                    id tmp1 = nil;
                                    tmp1 = [User modelObjectWithDictionary:obj1];
                                    if (tmp1 != nil) {
                                        [result1 addObject:tmp1];
                                    }
                                }
                            }
                            tmp0 = result1;
                            if (tmp0 != nil) {
                                [result0 addObject:tmp0];
                            }
                        }
                    }
                    self->_listWithListAndOtherModelValues = result0;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyListWithListAndOtherModelValues = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"list_with_map_and_other_model_values"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    NSArray *items = value;
                    NSMutableArray *result0 = [NSMutableArray arrayWithCapacity:items.count];
                    for (id obj0 in items) {
                        if (obj0 != (id)kCFNull) {
                            id tmp0 = nil;
                            NSDictionary *items1 = obj0;
                            NSMutableDictionary *result1 = [NSMutableDictionary dictionaryWithCapacity:items1.count];
                            [items1 enumerateKeysAndObjectsUsingBlock:^(NSString *  _Nonnull key1, id  _Nonnull obj1, __unused BOOL * _Nonnull stop1){
                                if (obj1 != nil && obj1 != (id)kCFNull) {
                                    result1[key1] = [User modelObjectWithDictionary:obj1];
                                }
                            }];
                            tmp0 = result1;
                            if (tmp0 != nil) {
                                [result0 addObject:tmp0];
                            }
                        }
                    }
                    self->_listWithMapAndOtherModelValues = result0;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyListWithMapAndOtherModelValues = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"list_with_object_values"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    NSArray *items = value;
                    NSMutableArray *result0 = [NSMutableArray arrayWithCapacity:items.count];
                    for (id obj0 in items) {
                        if (obj0 != (id)kCFNull) {
                            id tmp0 = nil;
                            tmp0 = [obj0 copy];
                            if (tmp0 != nil) {
                                [result0 addObject:tmp0];
                            }
                        }
                    }
                    self->_listWithObjectValues = result0;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyListWithObjectValues = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"list_with_other_model_values"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    NSArray *items = value;
                    NSMutableArray *result0 = [NSMutableArray arrayWithCapacity:items.count];
                    for (id obj0 in items) {
                        if (obj0 != (id)kCFNull) {
                            id tmp0 = nil;
                            tmp0 = [User modelObjectWithDictionary:obj0];
                            if (tmp0 != nil) {
                                [result0 addObject:tmp0];
                            }
                        }
                    }
                    self->_listWithOtherModelValues = result0;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyListWithOtherModelValues = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"list_with_primitive_values"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_listWithPrimitiveValues = value;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyListWithPrimitiveValues = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"map_polymorphic_values"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    NSDictionary *items0 = value;
                    NSMutableDictionary *result0 = [NSMutableDictionary dictionaryWithCapacity:items0.count];
                    [items0 enumerateKeysAndObjectsUsingBlock:^(NSString *  _Nonnull key0, id  _Nonnull obj0, __unused BOOL * _Nonnull stop0){
                        if (obj0 != nil && obj0 != (id)kCFNull) {
                            if ([obj0 isKindOfClass:[NSDictionary class]] && [obj0[@"type"] isEqualToString:@"user"]) {
                                result0[key0] = [EverythingMapPolymorphicValues  objectWithUser:[User modelObjectWithDictionary:obj0]];
                            }
                            if ([obj0 isKindOfClass:[NSDictionary class]] && [obj0[@"type"] isEqualToString:@"board"]) {
                                result0[key0] = [EverythingMapPolymorphicValues  objectWithBoard:[Board modelObjectWithDictionary:obj0]];
                            }
                            if ([obj0 isKindOfClass:[NSDictionary class]] && [obj0[@"type"] isEqualToString:@"image"]) {
                                result0[key0] = [EverythingMapPolymorphicValues  objectWithImage:[Image modelObjectWithDictionary:obj0]];
                            }
                            if ([obj0 isKindOfClass:[NSDictionary class]] && [obj0[@"type"] isEqualToString:@"pin"]) {
                                result0[key0] = [EverythingMapPolymorphicValues  objectWithPin:[Pin modelObjectWithDictionary:obj0]];
                            }
                            if ([obj0 isKindOfClass:[NSDictionary class]] && [obj0[@"type"] isEqualToString:@"everything"]) {
                                result0[key0] = [EverythingMapPolymorphicValues  objectWithEverything:[Everything modelObjectWithDictionary:obj0]];
                            }
                            if ([obj0 isKindOfClass:[NSArray class]]) {
                                result0[key0] = [EverythingMapPolymorphicValues  objectWithArray:obj0];
                            }
                            if ([obj0 isKindOfClass:[NSDictionary class]]) {
                                result0[key0] = [EverythingMapPolymorphicValues  objectWithDictionary:obj0];
                            }
                        }
                    }];
                    self->_mapPolymorphicValues = result0;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyMapPolymorphicValues = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"map_prop"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_mapProp = value;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyMapProp = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"map_with_list_and_other_model_values"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    NSDictionary *items0 = value;
                    NSMutableDictionary *result0 = [NSMutableDictionary dictionaryWithCapacity:items0.count];
                    [items0 enumerateKeysAndObjectsUsingBlock:^(NSString *  _Nonnull key0, id  _Nonnull obj0, __unused BOOL * _Nonnull stop0){
                        if (obj0 != nil && obj0 != (id)kCFNull) {
                            NSArray *items = obj0;
                            NSMutableArray *result1 = [NSMutableArray arrayWithCapacity:items.count];
                            for (id obj1 in items) {
                                if (obj1 != (id)kCFNull) {
                                    id tmp1 = nil;
                                    tmp1 = [User modelObjectWithDictionary:obj1];
                                    if (tmp1 != nil) {
                                        [result1 addObject:tmp1];
                                    }
                                }
                            }
                            result0[key0] = result1;
                        }
                    }];
                    self->_mapWithListAndOtherModelValues = result0;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyMapWithListAndOtherModelValues = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"map_with_map_and_other_model_values"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    NSDictionary *items0 = value;
                    NSMutableDictionary *result0 = [NSMutableDictionary dictionaryWithCapacity:items0.count];
                    [items0 enumerateKeysAndObjectsUsingBlock:^(NSString *  _Nonnull key0, id  _Nonnull obj0, __unused BOOL * _Nonnull stop0){
                        if (obj0 != nil && obj0 != (id)kCFNull) {
                            result0[key0] = obj0;
                        }
                    }];
                    self->_mapWithMapAndOtherModelValues = result0;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyMapWithMapAndOtherModelValues = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"map_with_object_values"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    NSDictionary *items0 = value;
                    NSMutableDictionary *result0 = [NSMutableDictionary dictionaryWithCapacity:items0.count];
                    [items0 enumerateKeysAndObjectsUsingBlock:^(NSString *  _Nonnull key0, id  _Nonnull obj0, __unused BOOL * _Nonnull stop0){
                        if (obj0 != nil && obj0 != (id)kCFNull) {
                            result0[key0] = [obj0 copy];
                        }
                    }];
                    self->_mapWithObjectValues = result0;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyMapWithObjectValues = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"map_with_other_model_values"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    NSDictionary *items0 = value;
                    NSMutableDictionary *result0 = [NSMutableDictionary dictionaryWithCapacity:items0.count];
                    [items0 enumerateKeysAndObjectsUsingBlock:^(NSString *  _Nonnull key0, id  _Nonnull obj0, __unused BOOL * _Nonnull stop0){
                        if (obj0 != nil && obj0 != (id)kCFNull) {
                            result0[key0] = [User modelObjectWithDictionary:obj0];
                        }
                    }];
                    self->_mapWithOtherModelValues = result0;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyMapWithOtherModelValues = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"map_with_primitive_values"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_mapWithPrimitiveValues = value;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyMapWithPrimitiveValues = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"number_prop"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_numberProp = [value doubleValue];
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyNumberProp = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"other_model_prop"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_otherModelProp = [User modelObjectWithDictionary:value];
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyOtherModelProp = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"polymorphic_prop"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    if ([value isKindOfClass:[NSDictionary class]] && [value[@"type"] isEqualToString:@"user"]) {
                        self->_polymorphicProp = [EverythingPolymorphicProp  objectWithUser:[User modelObjectWithDictionary:value]];
                    }
                    if ([value isKindOfClass:[NSDictionary class]] && [value[@"type"] isEqualToString:@"board"]) {
                        self->_polymorphicProp = [EverythingPolymorphicProp  objectWithBoard:[Board modelObjectWithDictionary:value]];
                    }
                    if ([value isKindOfClass:[NSDictionary class]] && [value[@"type"] isEqualToString:@"image"]) {
                        self->_polymorphicProp = [EverythingPolymorphicProp  objectWithImage:[Image modelObjectWithDictionary:value]];
                    }
                    if ([value isKindOfClass:[NSDictionary class]] && [value[@"type"] isEqualToString:@"pin"]) {
                        self->_polymorphicProp = [EverythingPolymorphicProp  objectWithPin:[Pin modelObjectWithDictionary:value]];
                    }
                    if ([value isKindOfClass:[NSDictionary class]] && [value[@"type"] isEqualToString:@"everything"]) {
                        self->_polymorphicProp = [EverythingPolymorphicProp  objectWithEverything:[Everything modelObjectWithDictionary:value]];
                    }
                    if ([value isKindOfClass:[NSString class]]) {
                        self->_polymorphicProp = [EverythingPolymorphicProp  objectWithString:[value copy]];
                    }
                    if ([value isKindOfClass:[NSNumber class]] && strcmp([value objCType], @encode(BOOL)) == 0) {
                        self->_polymorphicProp = [EverythingPolymorphicProp  objectWithBoolean:[value boolValue]];
                    }
                    if ([value isKindOfClass:[NSNumber class]] && (strcmp([value objCType], @encode(int)) == 0 ||
                    strcmp([value objCType], @encode(unsigned int)) == 0 ||
                    strcmp([value objCType], @encode(short)) == 0 ||
                    strcmp([value objCType], @encode(unsigned short)) == 0 ||
                    strcmp([value objCType], @encode(long)) == 0 ||
                    strcmp([value objCType], @encode(long long)) == 0 ||
                    strcmp([value objCType], @encode(unsigned long)) == 0 ||
                    strcmp([value objCType], @encode(unsigned long long)) == 0)) {
                        self->_polymorphicProp = [EverythingPolymorphicProp  objectWithInteger:[value integerValue]];
                    }
                    if ([value isKindOfClass:[NSNumber class]] && (strcmp([value objCType], @encode(float)) == 0 ||
                    strcmp([value objCType], @encode(double)) == 0)) {
                        self->_polymorphicProp = [EverythingPolymorphicProp  objectWithFloat:[value doubleValue]];
                    }
                    if ([value isKindOfClass:[NSString class]] && [[NSValueTransformer valueTransformerForName:kPlankDateValueTransformerKey] transformedValue:value] != nil) {
                        self->_polymorphicProp = [EverythingPolymorphicProp  objectWithDate:[[NSValueTransformer valueTransformerForName:kPlankDateValueTransformerKey] transformedValue:value]];
                    }
                    if ([value isKindOfClass:[NSString class]] && [NSURL URLWithString:value] != nil) {
                        self->_polymorphicProp = [EverythingPolymorphicProp  objectWithURL:[NSURL URLWithString:value]];
                    }
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyPolymorphicProp = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"set_prop"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_setProp = value;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertySetProp = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"set_prop_with_other_model_values"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    NSArray *items = value;
                    NSMutableSet *result0 = [NSMutableSet setWithCapacity:items.count];
                    for (id obj0 in items) {
                        if (obj0 != (id)kCFNull) {
                            id tmp0 = nil;
                            tmp0 = [User modelObjectWithDictionary:obj0];
                            if (tmp0 != nil) {
                                [result0 addObject:tmp0];
                            }
                        }
                    }
                    self->_setPropWithOtherModelValues = result0;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertySetPropWithOtherModelValues = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"set_prop_with_primitive_values"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    NSArray *items = value;
                    self->_setPropWithPrimitiveValues = [NSSet setWithArray:items];
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertySetPropWithPrimitiveValues = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"set_prop_with_values"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    NSArray *items = value;
                    NSMutableSet *result0 = [NSMutableSet setWithCapacity:items.count];
                    for (id obj0 in items) {
                        if (obj0 != (id)kCFNull) {
                            id tmp0 = nil;
                            tmp0 = [obj0 copy];
                            if (tmp0 != nil) {
                                [result0 addObject:tmp0];
                            }
                        }
                    }
                    self->_setPropWithValues = result0;
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertySetPropWithValues = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"string_enum"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_stringEnum = EverythingStringEnumFromString(value);
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyStringEnum = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"string_prop"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_stringProp = [value copy];
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyStringProp = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"type"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_type = [value copy];
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyType = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"uri_prop"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_uriProp = [NSURL URLWithString:value];
                }
                self->_everythingDirtyProperties.EverythingDirtyPropertyUriProp = 1;
            }
        }
    if ([self class] == [Everything class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(PlankModelInitTypeDefault) }];
    }
    return self;
}
- (instancetype)initWithBuilder:(EverythingBuilder *)builder
{
    NSParameterAssert(builder);
    return [self initWithBuilder:builder initType:PlankModelInitTypeDefault];
}
- (instancetype)initWithBuilder:(EverythingBuilder *)builder initType:(PlankModelInitType)initType
{
    NSParameterAssert(builder);
    if (!(self = [super init])) {
        return self;
    }
    _arrayProp = builder.arrayProp;
    _booleanProp = builder.booleanProp;
    _dateProp = builder.dateProp;
    _intEnum = builder.intEnum;
    _intProp = builder.intProp;
    _listPolymorphicValues = builder.listPolymorphicValues;
    _listWithListAndOtherModelValues = builder.listWithListAndOtherModelValues;
    _listWithMapAndOtherModelValues = builder.listWithMapAndOtherModelValues;
    _listWithObjectValues = builder.listWithObjectValues;
    _listWithOtherModelValues = builder.listWithOtherModelValues;
    _listWithPrimitiveValues = builder.listWithPrimitiveValues;
    _mapPolymorphicValues = builder.mapPolymorphicValues;
    _mapProp = builder.mapProp;
    _mapWithListAndOtherModelValues = builder.mapWithListAndOtherModelValues;
    _mapWithMapAndOtherModelValues = builder.mapWithMapAndOtherModelValues;
    _mapWithObjectValues = builder.mapWithObjectValues;
    _mapWithOtherModelValues = builder.mapWithOtherModelValues;
    _mapWithPrimitiveValues = builder.mapWithPrimitiveValues;
    _numberProp = builder.numberProp;
    _otherModelProp = builder.otherModelProp;
    _polymorphicProp = builder.polymorphicProp;
    _setProp = builder.setProp;
    _setPropWithOtherModelValues = builder.setPropWithOtherModelValues;
    _setPropWithPrimitiveValues = builder.setPropWithPrimitiveValues;
    _setPropWithValues = builder.setPropWithValues;
    _stringEnum = builder.stringEnum;
    _stringProp = builder.stringProp;
    _type = builder.type;
    _uriProp = builder.uriProp;
    _everythingDirtyProperties = builder.everythingDirtyProperties;
    if ([self class] == [Everything class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(initType) }];
    }
    return self;
}
- (NSString *)debugDescription
{
    NSArray<NSString *> *parentDebugDescription = [[super debugDescription] componentsSeparatedByString:@"\n"];
    NSMutableArray *descriptionFields = [NSMutableArray arrayWithCapacity:29];
    [descriptionFields addObject:parentDebugDescription];
    struct EverythingDirtyProperties props = _everythingDirtyProperties;
    if (props.EverythingDirtyPropertyArrayProp) {
        [descriptionFields addObject:[@"_arrayProp = " stringByAppendingFormat:@"%@", _arrayProp]];
    }
    if (props.EverythingDirtyPropertyBooleanProp) {
        [descriptionFields addObject:[@"_booleanProp = " stringByAppendingFormat:@"%@", @(_booleanProp)]];
    }
    if (props.EverythingDirtyPropertyDateProp) {
        [descriptionFields addObject:[@"_dateProp = " stringByAppendingFormat:@"%@", _dateProp]];
    }
    if (props.EverythingDirtyPropertyIntEnum) {
        [descriptionFields addObject:[@"_intEnum = " stringByAppendingFormat:@"%@", @(_intEnum)]];
    }
    if (props.EverythingDirtyPropertyIntProp) {
        [descriptionFields addObject:[@"_intProp = " stringByAppendingFormat:@"%@", @(_intProp)]];
    }
    if (props.EverythingDirtyPropertyListPolymorphicValues) {
        [descriptionFields addObject:[@"_listPolymorphicValues = " stringByAppendingFormat:@"%@", _listPolymorphicValues]];
    }
    if (props.EverythingDirtyPropertyListWithListAndOtherModelValues) {
        [descriptionFields addObject:[@"_listWithListAndOtherModelValues = " stringByAppendingFormat:@"%@", _listWithListAndOtherModelValues]];
    }
    if (props.EverythingDirtyPropertyListWithMapAndOtherModelValues) {
        [descriptionFields addObject:[@"_listWithMapAndOtherModelValues = " stringByAppendingFormat:@"%@", _listWithMapAndOtherModelValues]];
    }
    if (props.EverythingDirtyPropertyListWithObjectValues) {
        [descriptionFields addObject:[@"_listWithObjectValues = " stringByAppendingFormat:@"%@", _listWithObjectValues]];
    }
    if (props.EverythingDirtyPropertyListWithOtherModelValues) {
        [descriptionFields addObject:[@"_listWithOtherModelValues = " stringByAppendingFormat:@"%@", _listWithOtherModelValues]];
    }
    if (props.EverythingDirtyPropertyListWithPrimitiveValues) {
        [descriptionFields addObject:[@"_listWithPrimitiveValues = " stringByAppendingFormat:@"%@", _listWithPrimitiveValues]];
    }
    if (props.EverythingDirtyPropertyMapPolymorphicValues) {
        [descriptionFields addObject:[@"_mapPolymorphicValues = " stringByAppendingFormat:@"%@", _mapPolymorphicValues]];
    }
    if (props.EverythingDirtyPropertyMapProp) {
        [descriptionFields addObject:[@"_mapProp = " stringByAppendingFormat:@"%@", _mapProp]];
    }
    if (props.EverythingDirtyPropertyMapWithListAndOtherModelValues) {
        [descriptionFields addObject:[@"_mapWithListAndOtherModelValues = " stringByAppendingFormat:@"%@", _mapWithListAndOtherModelValues]];
    }
    if (props.EverythingDirtyPropertyMapWithMapAndOtherModelValues) {
        [descriptionFields addObject:[@"_mapWithMapAndOtherModelValues = " stringByAppendingFormat:@"%@", _mapWithMapAndOtherModelValues]];
    }
    if (props.EverythingDirtyPropertyMapWithObjectValues) {
        [descriptionFields addObject:[@"_mapWithObjectValues = " stringByAppendingFormat:@"%@", _mapWithObjectValues]];
    }
    if (props.EverythingDirtyPropertyMapWithOtherModelValues) {
        [descriptionFields addObject:[@"_mapWithOtherModelValues = " stringByAppendingFormat:@"%@", _mapWithOtherModelValues]];
    }
    if (props.EverythingDirtyPropertyMapWithPrimitiveValues) {
        [descriptionFields addObject:[@"_mapWithPrimitiveValues = " stringByAppendingFormat:@"%@", _mapWithPrimitiveValues]];
    }
    if (props.EverythingDirtyPropertyNumberProp) {
        [descriptionFields addObject:[@"_numberProp = " stringByAppendingFormat:@"%@", @(_numberProp)]];
    }
    if (props.EverythingDirtyPropertyOtherModelProp) {
        [descriptionFields addObject:[@"_otherModelProp = " stringByAppendingFormat:@"%@", _otherModelProp]];
    }
    if (props.EverythingDirtyPropertyPolymorphicProp) {
        [descriptionFields addObject:[@"_polymorphicProp = " stringByAppendingFormat:@"%@", _polymorphicProp]];
    }
    if (props.EverythingDirtyPropertySetProp) {
        [descriptionFields addObject:[@"_setProp = " stringByAppendingFormat:@"%@", _setProp]];
    }
    if (props.EverythingDirtyPropertySetPropWithOtherModelValues) {
        [descriptionFields addObject:[@"_setPropWithOtherModelValues = " stringByAppendingFormat:@"%@", _setPropWithOtherModelValues]];
    }
    if (props.EverythingDirtyPropertySetPropWithPrimitiveValues) {
        [descriptionFields addObject:[@"_setPropWithPrimitiveValues = " stringByAppendingFormat:@"%@", _setPropWithPrimitiveValues]];
    }
    if (props.EverythingDirtyPropertySetPropWithValues) {
        [descriptionFields addObject:[@"_setPropWithValues = " stringByAppendingFormat:@"%@", _setPropWithValues]];
    }
    if (props.EverythingDirtyPropertyStringEnum) {
        [descriptionFields addObject:[@"_stringEnum = " stringByAppendingFormat:@"%@", EverythingStringEnumToString(_stringEnum)]];
    }
    if (props.EverythingDirtyPropertyStringProp) {
        [descriptionFields addObject:[@"_stringProp = " stringByAppendingFormat:@"%@", _stringProp]];
    }
    if (props.EverythingDirtyPropertyType) {
        [descriptionFields addObject:[@"_type = " stringByAppendingFormat:@"%@", _type]];
    }
    if (props.EverythingDirtyPropertyUriProp) {
        [descriptionFields addObject:[@"_uriProp = " stringByAppendingFormat:@"%@", _uriProp]];
    }
    return [NSString stringWithFormat:@"Everything = {\n%@\n}", debugDescriptionForFields(descriptionFields)];
}
- (instancetype)copyWithBlock:(PLANK_NOESCAPE void (^)(EverythingBuilder *builder))block
{
    NSParameterAssert(block);
    EverythingBuilder *builder = [[EverythingBuilder alloc] initWithModel:self];
    block(builder);
    return [builder build];
}
- (BOOL)isEqual:(id)anObject
{
    if (self == anObject) {
        return YES;
    }
    if ([anObject isKindOfClass:[Everything class]] == NO) {
        return NO;
    }
    return [self isEqualToEverything:anObject];
}
- (BOOL)isEqualToEverything:(Everything *)anObject
{
    return (
        (anObject != nil) &&
        (_numberProp == anObject.numberProp) &&
        (_intProp == anObject.intProp) &&
        (_intEnum == anObject.intEnum) &&
        (_stringEnum == anObject.stringEnum) &&
        (_booleanProp == anObject.booleanProp) &&
        (_arrayProp == anObject.arrayProp || [_arrayProp isEqualToArray:anObject.arrayProp]) &&
        (_listWithListAndOtherModelValues == anObject.listWithListAndOtherModelValues || [_listWithListAndOtherModelValues isEqualToArray:anObject.listWithListAndOtherModelValues]) &&
        (_listWithMapAndOtherModelValues == anObject.listWithMapAndOtherModelValues || [_listWithMapAndOtherModelValues isEqualToArray:anObject.listWithMapAndOtherModelValues]) &&
        (_listWithObjectValues == anObject.listWithObjectValues || [_listWithObjectValues isEqualToArray:anObject.listWithObjectValues]) &&
        (_listWithOtherModelValues == anObject.listWithOtherModelValues || [_listWithOtherModelValues isEqualToArray:anObject.listWithOtherModelValues]) &&
        (_listWithPrimitiveValues == anObject.listWithPrimitiveValues || [_listWithPrimitiveValues isEqualToArray:anObject.listWithPrimitiveValues]) &&
        (_mapPolymorphicValues == anObject.mapPolymorphicValues || [_mapPolymorphicValues isEqualToDictionary:anObject.mapPolymorphicValues]) &&
        (_mapProp == anObject.mapProp || [_mapProp isEqualToDictionary:anObject.mapProp]) &&
        (_mapWithListAndOtherModelValues == anObject.mapWithListAndOtherModelValues || [_mapWithListAndOtherModelValues isEqualToDictionary:anObject.mapWithListAndOtherModelValues]) &&
        (_mapWithMapAndOtherModelValues == anObject.mapWithMapAndOtherModelValues || [_mapWithMapAndOtherModelValues isEqualToDictionary:anObject.mapWithMapAndOtherModelValues]) &&
        (_mapWithObjectValues == anObject.mapWithObjectValues || [_mapWithObjectValues isEqualToDictionary:anObject.mapWithObjectValues]) &&
        (_mapWithOtherModelValues == anObject.mapWithOtherModelValues || [_mapWithOtherModelValues isEqualToDictionary:anObject.mapWithOtherModelValues]) &&
        (_mapWithPrimitiveValues == anObject.mapWithPrimitiveValues || [_mapWithPrimitiveValues isEqualToDictionary:anObject.mapWithPrimitiveValues]) &&
        (_listPolymorphicValues == anObject.listPolymorphicValues || [_listPolymorphicValues isEqualToArray:anObject.listPolymorphicValues]) &&
        (_otherModelProp == anObject.otherModelProp || [_otherModelProp isEqual:anObject.otherModelProp]) &&
        (_polymorphicProp == anObject.polymorphicProp || [_polymorphicProp isEqual:anObject.polymorphicProp]) &&
        (_setProp == anObject.setProp || [_setProp isEqualToSet:anObject.setProp]) &&
        (_setPropWithOtherModelValues == anObject.setPropWithOtherModelValues || [_setPropWithOtherModelValues isEqualToSet:anObject.setPropWithOtherModelValues]) &&
        (_setPropWithPrimitiveValues == anObject.setPropWithPrimitiveValues || [_setPropWithPrimitiveValues isEqualToSet:anObject.setPropWithPrimitiveValues]) &&
        (_setPropWithValues == anObject.setPropWithValues || [_setPropWithValues isEqualToSet:anObject.setPropWithValues]) &&
        (_dateProp == anObject.dateProp || [_dateProp isEqualToDate:anObject.dateProp]) &&
        (_stringProp == anObject.stringProp || [_stringProp isEqualToString:anObject.stringProp]) &&
        (_type == anObject.type || [_type isEqualToString:anObject.type]) &&
        (_uriProp == anObject.uriProp || [_uriProp isEqual:anObject.uriProp])
    );
}
- (NSUInteger)hash
{
    NSUInteger subhashes[] = {
        17,
        [_arrayProp hash],
        (_booleanProp ? 1231 : 1237),
        [_dateProp hash],
        (NSUInteger)_intEnum,
        (NSUInteger)_intProp,
        [_listPolymorphicValues hash],
        [_listWithListAndOtherModelValues hash],
        [_listWithMapAndOtherModelValues hash],
        [_listWithObjectValues hash],
        [_listWithOtherModelValues hash],
        [_listWithPrimitiveValues hash],
        [_mapPolymorphicValues hash],
        [_mapProp hash],
        [_mapWithListAndOtherModelValues hash],
        [_mapWithMapAndOtherModelValues hash],
        [_mapWithObjectValues hash],
        [_mapWithOtherModelValues hash],
        [_mapWithPrimitiveValues hash],
         [@(_numberProp) hash],
        [_otherModelProp hash],
        [_polymorphicProp hash],
        [_setProp hash],
        [_setPropWithOtherModelValues hash],
        [_setPropWithPrimitiveValues hash],
        [_setPropWithValues hash],
        (NSUInteger)_stringEnum,
        [_stringProp hash],
        [_type hash],
        [_uriProp hash]
    };
    return PINIntegerArrayHash(subhashes, sizeof(subhashes) / sizeof(subhashes[0]));
}
- (instancetype)mergeWithModel:(Everything *)modelObject
{
    return [self mergeWithModel:modelObject initType:PlankModelInitTypeFromMerge];
}
- (instancetype)mergeWithModel:(Everything *)modelObject initType:(PlankModelInitType)initType
{
    NSParameterAssert(modelObject);
    EverythingBuilder *builder = [[EverythingBuilder alloc] initWithModel:self];
    [builder mergeWithModel:modelObject];
    return [[Everything alloc] initWithBuilder:builder initType:initType];
}
- (NSDictionary *)dictionaryObjectRepresentation
{
    NSMutableDictionary *dict = [[NSMutableDictionary alloc] initWithCapacity:29];
    if (_everythingDirtyProperties.EverythingDirtyPropertyArrayProp) {
        if (_arrayProp != (id)kCFNull) {
            [dict setObject:_arrayProp forKey:@"array_prop"];
        } else {
            [dict setObject:[NSNull null] forKey:@"array_prop"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyBooleanProp) {
        [dict setObject:@(_booleanProp) forKey: @"boolean_prop"];
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyDateProp) {
        if (_dateProp != (id)kCFNull) {
            NSValueTransformer *valueTransformer = [NSValueTransformer valueTransformerForName:kPlankDateValueTransformerKey];
            if ([[valueTransformer class] allowsReverseTransformation]) {
                [dict setObject:[valueTransformer reverseTransformedValue:_dateProp] forKey:@"date_prop"];
            } else {
                [dict setObject:[NSNull null] forKey:@"date_prop"];
            }
        } else {
            [dict setObject:[NSNull null] forKey:@"date_prop"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyIntEnum) {
        [dict setObject:@(_intEnum) forKey:@"int_enum"];
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyIntProp) {
        [dict setObject:@(_intProp) forKey: @"int_prop"];
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyListPolymorphicValues) {
        if (_listPolymorphicValues != (id)kCFNull) {
            [dict setObject:_listPolymorphicValues forKey:@"list_polymorphic_values"];
        } else {
            [dict setObject:[NSNull null] forKey:@"list_polymorphic_values"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyListWithListAndOtherModelValues) {
        if (_listWithListAndOtherModelValues != (id)kCFNull) {
            __auto_type items0 = _listWithListAndOtherModelValues;
            NSMutableArray *result0 = [NSMutableArray arrayWithCapacity:items0.count];
            for (NSArray<User *> * obj0 in items0) {
                NSArray *items1 = obj0;
                NSMutableArray *result1 = [NSMutableArray arrayWithCapacity:items1.count];
                for (User * obj1 in items1) {
                    [result1 addObject:[obj1 dictionaryObjectRepresentation]];
                }
                [result0 addObject:result1];
            }
            [dict setObject:result0 forKey:@"list_with_list_and_other_model_values"];
        } else {
            [dict setObject:[NSNull null] forKey:@"list_with_list_and_other_model_values"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyListWithMapAndOtherModelValues) {
        if (_listWithMapAndOtherModelValues != (id)kCFNull) {
            __auto_type items0 = _listWithMapAndOtherModelValues;
            NSMutableArray *result0 = [NSMutableArray arrayWithCapacity:items0.count];
            for (NSDictionary<NSString *, User *> * obj0 in items0) {
                NSDictionary<NSString *, User *> * items1 = obj0;
                __auto_type result1 = [NSMutableDictionary new];
                for (NSString *key1 in items1) {
                    User * tmp1 = [items1 objectForKey:key1];
                    NSMutableDictionary *tmpDict1 = [NSMutableDictionary new];
                    [tmpDict1 setObject:[tmp1 dictionaryObjectRepresentation] forKey:@"tmp1"];
                    result1[key1] = tmpDict1[@"tmp1"];
                }
                [result0 addObject:result1];
            }
            [dict setObject:result0 forKey:@"list_with_map_and_other_model_values"];
        } else {
            [dict setObject:[NSNull null] forKey:@"list_with_map_and_other_model_values"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyListWithObjectValues) {
        if (_listWithObjectValues != (id)kCFNull) {
            __auto_type items0 = _listWithObjectValues;
            NSMutableArray *result0 = [NSMutableArray arrayWithCapacity:items0.count];
            for (NSString * obj0 in items0) {
                [result0 addObject:obj0];
            }
            [dict setObject:result0 forKey:@"list_with_object_values"];
        } else {
            [dict setObject:[NSNull null] forKey:@"list_with_object_values"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyListWithOtherModelValues) {
        if (_listWithOtherModelValues != (id)kCFNull) {
            __auto_type items0 = _listWithOtherModelValues;
            NSMutableArray *result0 = [NSMutableArray arrayWithCapacity:items0.count];
            for (User * obj0 in items0) {
                [result0 addObject:[obj0 dictionaryObjectRepresentation]];
            }
            [dict setObject:result0 forKey:@"list_with_other_model_values"];
        } else {
            [dict setObject:[NSNull null] forKey:@"list_with_other_model_values"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyListWithPrimitiveValues) {
        if (_listWithPrimitiveValues != (id)kCFNull) {
            __auto_type items0 = _listWithPrimitiveValues;
            NSMutableArray *result0 = [NSMutableArray arrayWithCapacity:items0.count];
            for (id obj0 in items0) {
                [result0 addObject:obj0];
            }
            [dict setObject:result0 forKey:@"list_with_primitive_values"];
        } else {
            [dict setObject:[NSNull null] forKey:@"list_with_primitive_values"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyMapPolymorphicValues) {
        if (_mapPolymorphicValues != (id)kCFNull) {
            NSMutableDictionary *items0 = [NSMutableDictionary new];
            for (NSString *key0 in _mapPolymorphicValues) {
                __auto_type dictValue0 = _mapPolymorphicValues[key0];
                NSMutableDictionary *tmp0 = [NSMutableDictionary new];
                [tmp0 setObject:[dictValue0 dictionaryObjectRepresentation] forKey:@"dictValue0"];
                [items0 setObject:tmp0[@"dictValue0"] forKey:key0];
            }
            [dict setObject:items0 forKey:@"map_polymorphic_values"];
        } else {
            [dict setObject:[NSNull null] forKey:@"map_polymorphic_values"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyMapProp) {
        if (_mapProp != (id)kCFNull) {
            [dict setObject:_mapProp forKey:@"map_prop"];
        } else {
            [dict setObject:[NSNull null] forKey:@"map_prop"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyMapWithListAndOtherModelValues) {
        if (_mapWithListAndOtherModelValues != (id)kCFNull) {
            NSMutableDictionary *items0 = [NSMutableDictionary new];
            for (NSString *key0 in _mapWithListAndOtherModelValues) {
                __auto_type dictValue0 = _mapWithListAndOtherModelValues[key0];
                NSMutableDictionary *tmp0 = [NSMutableDictionary new];
                __auto_type items1 = dictValue0;
                NSMutableArray *result1 = [NSMutableArray arrayWithCapacity:items1.count];
                for (User * obj1 in items1) {
                    [result1 addObject:[obj1 dictionaryObjectRepresentation]];
                }
                [tmp0 setObject:result1 forKey:@"dictValue0"];
                [items0 setObject:tmp0[@"dictValue0"] forKey:key0];
            }
            [dict setObject:items0 forKey:@"map_with_list_and_other_model_values"];
        } else {
            [dict setObject:[NSNull null] forKey:@"map_with_list_and_other_model_values"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyMapWithMapAndOtherModelValues) {
        if (_mapWithMapAndOtherModelValues != (id)kCFNull) {
            NSMutableDictionary *items0 = [NSMutableDictionary new];
            for (NSString *key0 in _mapWithMapAndOtherModelValues) {
                __auto_type dictValue0 = _mapWithMapAndOtherModelValues[key0];
                NSMutableDictionary *tmp0 = [NSMutableDictionary new];
                [tmp0 setObject:dictValue0 forKey:@"dictValue0"];
                [items0 setObject:tmp0[@"dictValue0"] forKey:key0];
            }
            [dict setObject:items0 forKey:@"map_with_map_and_other_model_values"];
        } else {
            [dict setObject:[NSNull null] forKey:@"map_with_map_and_other_model_values"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyMapWithObjectValues) {
        if (_mapWithObjectValues != (id)kCFNull) {
            [dict setObject:_mapWithObjectValues forKey:@"map_with_object_values"];
        } else {
            [dict setObject:[NSNull null] forKey:@"map_with_object_values"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyMapWithOtherModelValues) {
        if (_mapWithOtherModelValues != (id)kCFNull) {
            NSMutableDictionary *items0 = [NSMutableDictionary new];
            for (NSString *key0 in _mapWithOtherModelValues) {
                __auto_type dictValue0 = _mapWithOtherModelValues[key0];
                NSMutableDictionary *tmp0 = [NSMutableDictionary new];
                [tmp0 setObject:[dictValue0 dictionaryObjectRepresentation] forKey:@"dictValue0"];
                [items0 setObject:tmp0[@"dictValue0"] forKey:key0];
            }
            [dict setObject:items0 forKey:@"map_with_other_model_values"];
        } else {
            [dict setObject:[NSNull null] forKey:@"map_with_other_model_values"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyMapWithPrimitiveValues) {
        if (_mapWithPrimitiveValues != (id)kCFNull) {
            [dict setObject:_mapWithPrimitiveValues forKey:@"map_with_primitive_values"];
        } else {
            [dict setObject:[NSNull null] forKey:@"map_with_primitive_values"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyNumberProp) {
        [dict setObject:@(_numberProp) forKey: @"number_prop"];
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyOtherModelProp) {
        if (_otherModelProp != (id)kCFNull) {
            [dict setObject:[_otherModelProp dictionaryObjectRepresentation] forKey:@"other_model_prop"];
        } else {
            [dict setObject:[NSNull null] forKey:@"other_model_prop"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyPolymorphicProp) {
        if (_polymorphicProp != (id)kCFNull) {
            [dict setObject:[_polymorphicProp dictionaryObjectRepresentation] forKey:@"polymorphic_prop"];
        } else {
            [dict setObject:[NSNull null] forKey:@"polymorphic_prop"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertySetProp) {
        if (_setProp != (id)kCFNull) {
            [dict setObject:_setProp forKey:@"set_prop"];
        } else {
            [dict setObject:[NSNull null] forKey:@"set_prop"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertySetPropWithOtherModelValues) {
        if (_setPropWithOtherModelValues != (id)kCFNull) {
            __auto_type items0 = _setPropWithOtherModelValues;
            NSMutableArray *result0 = [NSMutableArray arrayWithCapacity:items0.count];
            for (User * obj0 in items0) {
                [result0 addObject:[obj0 dictionaryObjectRepresentation]];
            }
            [dict setObject:result0 forKey:@"set_prop_with_other_model_values"];
        } else {
            [dict setObject:[NSNull null] forKey:@"set_prop_with_other_model_values"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertySetPropWithPrimitiveValues) {
        if (_setPropWithPrimitiveValues != (id)kCFNull) {
            __auto_type items0 = _setPropWithPrimitiveValues;
            NSMutableArray *result0 = [NSMutableArray arrayWithCapacity:items0.count];
            for (id obj0 in items0) {
                [result0 addObject:obj0];
            }
            [dict setObject:result0 forKey:@"set_prop_with_primitive_values"];
        } else {
            [dict setObject:[NSNull null] forKey:@"set_prop_with_primitive_values"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertySetPropWithValues) {
        if (_setPropWithValues != (id)kCFNull) {
            __auto_type items0 = _setPropWithValues;
            NSMutableArray *result0 = [NSMutableArray arrayWithCapacity:items0.count];
            for (NSString * obj0 in items0) {
                [result0 addObject:obj0];
            }
            [dict setObject:result0 forKey:@"set_prop_with_values"];
        } else {
            [dict setObject:[NSNull null] forKey:@"set_prop_with_values"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyStringEnum) {
        [dict setObject:EverythingStringEnumToString(_stringEnum) forKey:@"string_enum"];
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyStringProp) {
        if (_stringProp != (id)kCFNull) {
            [dict setObject:_stringProp forKey:@"string_prop"];
        } else {
            [dict setObject:[NSNull null] forKey:@"string_prop"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyType) {
        if (_type != (id)kCFNull) {
            [dict setObject:_type forKey:@"type"];
        } else {
            [dict setObject:[NSNull null] forKey:@"type"];
        }
    }
    if (_everythingDirtyProperties.EverythingDirtyPropertyUriProp) {
        if (_uriProp != (id)kCFNull) {
            [dict setObject:[_uriProp absoluteString] forKey:@"uri_prop"];
        } else {
            [dict setObject:[NSNull null] forKey:@"uri_prop"];
        }
    }
    return dict;
}
#pragma mark - NSCopying
- (id)copyWithZone:(NSZone *)zone
{
    return self;
}
#pragma mark - NSSecureCoding
+ (BOOL)supportsSecureCoding
{
    return YES;
}
- (instancetype)initWithCoder:(NSCoder *)aDecoder
{
    if (!(self = [super init])) {
        return self;
    }
    _arrayProp = [aDecoder decodeObjectOfClass:[NSArray class] forKey:@"array_prop"];
    _booleanProp = [aDecoder decodeBoolForKey:@"boolean_prop"];
    _dateProp = [aDecoder decodeObjectOfClass:[NSDate class] forKey:@"date_prop"];
    _intEnum = [aDecoder decodeIntegerForKey:@"int_enum"];
    _intProp = [aDecoder decodeIntegerForKey:@"int_prop"];
    _listPolymorphicValues = [aDecoder decodeObjectOfClass:[NSArray class] forKey:@"list_polymorphic_values"];
    _listWithListAndOtherModelValues = [aDecoder decodeObjectOfClasses:[NSSet setWithArray:@[[User class], [NSArray class]]] forKey:@"list_with_list_and_other_model_values"];
    _listWithMapAndOtherModelValues = [aDecoder decodeObjectOfClasses:[NSSet setWithArray:@[[NSDictionary class], [User class], [NSArray class]]] forKey:@"list_with_map_and_other_model_values"];
    _listWithObjectValues = [aDecoder decodeObjectOfClasses:[NSSet setWithArray:@[[NSString class], [NSArray class]]] forKey:@"list_with_object_values"];
    _listWithOtherModelValues = [aDecoder decodeObjectOfClasses:[NSSet setWithArray:@[[User class], [NSArray class]]] forKey:@"list_with_other_model_values"];
    _listWithPrimitiveValues = [aDecoder decodeObjectOfClasses:[NSSet setWithArray:@[[NSNumber class], [NSArray class]]] forKey:@"list_with_primitive_values"];
    _mapPolymorphicValues = [aDecoder decodeObjectOfClasses:[NSSet setWithArray:@[[Board class], [NSArray class], [NSDictionary class], [Image class], [Everything class], [Pin class], [User class]]] forKey:@"map_polymorphic_values"];
    _mapProp = [aDecoder decodeObjectOfClass:[NSDictionary class] forKey:@"map_prop"];
    _mapWithListAndOtherModelValues = [aDecoder decodeObjectOfClasses:[NSSet setWithArray:@[[NSDictionary class], [User class], [NSArray class]]] forKey:@"map_with_list_and_other_model_values"];
    _mapWithMapAndOtherModelValues = [aDecoder decodeObjectOfClass:[NSDictionary class] forKey:@"map_with_map_and_other_model_values"];
    _mapWithObjectValues = [aDecoder decodeObjectOfClasses:[NSSet setWithArray:@[[NSDictionary class], [NSString class]]] forKey:@"map_with_object_values"];
    _mapWithOtherModelValues = [aDecoder decodeObjectOfClasses:[NSSet setWithArray:@[[NSDictionary class], [User class]]] forKey:@"map_with_other_model_values"];
    _mapWithPrimitiveValues = [aDecoder decodeObjectOfClasses:[NSSet setWithArray:@[[NSDictionary class], [NSNumber class]]] forKey:@"map_with_primitive_values"];
    _numberProp = [aDecoder decodeDoubleForKey:@"number_prop"];
    _otherModelProp = [aDecoder decodeObjectOfClass:[User class] forKey:@"other_model_prop"];
    _polymorphicProp = [aDecoder decodeObjectOfClasses:[NSSet setWithArray:@[[Board class], [NSDate class], [NSNumber class], [Image class], [Everything class], [NSURL class], [Pin class], [User class], [NSString class]]] forKey:@"polymorphic_prop"];
    _setProp = [aDecoder decodeObjectOfClass:[NSSet class] forKey:@"set_prop"];
    _setPropWithOtherModelValues = [aDecoder decodeObjectOfClasses:[NSSet setWithArray:@[[NSSet class], [User class]]] forKey:@"set_prop_with_other_model_values"];
    _setPropWithPrimitiveValues = [aDecoder decodeObjectOfClasses:[NSSet setWithArray:@[[NSNumber class], [NSSet class]]] forKey:@"set_prop_with_primitive_values"];
    _setPropWithValues = [aDecoder decodeObjectOfClasses:[NSSet setWithArray:@[[NSSet class], [NSString class]]] forKey:@"set_prop_with_values"];
    _stringEnum = [aDecoder decodeIntegerForKey:@"string_enum"];
    _stringProp = [aDecoder decodeObjectOfClass:[NSString class] forKey:@"string_prop"];
    _type = [aDecoder decodeObjectOfClass:[NSString class] forKey:@"type"];
    _uriProp = [aDecoder decodeObjectOfClass:[NSURL class] forKey:@"uri_prop"];
    _everythingDirtyProperties.EverythingDirtyPropertyArrayProp = [aDecoder decodeIntForKey:@"array_prop_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyBooleanProp = [aDecoder decodeIntForKey:@"boolean_prop_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyDateProp = [aDecoder decodeIntForKey:@"date_prop_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyIntEnum = [aDecoder decodeIntForKey:@"int_enum_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyIntProp = [aDecoder decodeIntForKey:@"int_prop_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyListPolymorphicValues = [aDecoder decodeIntForKey:@"list_polymorphic_values_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyListWithListAndOtherModelValues = [aDecoder decodeIntForKey:@"list_with_list_and_other_model_values_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyListWithMapAndOtherModelValues = [aDecoder decodeIntForKey:@"list_with_map_and_other_model_values_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyListWithObjectValues = [aDecoder decodeIntForKey:@"list_with_object_values_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyListWithOtherModelValues = [aDecoder decodeIntForKey:@"list_with_other_model_values_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyListWithPrimitiveValues = [aDecoder decodeIntForKey:@"list_with_primitive_values_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyMapPolymorphicValues = [aDecoder decodeIntForKey:@"map_polymorphic_values_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyMapProp = [aDecoder decodeIntForKey:@"map_prop_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyMapWithListAndOtherModelValues = [aDecoder decodeIntForKey:@"map_with_list_and_other_model_values_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyMapWithMapAndOtherModelValues = [aDecoder decodeIntForKey:@"map_with_map_and_other_model_values_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyMapWithObjectValues = [aDecoder decodeIntForKey:@"map_with_object_values_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyMapWithOtherModelValues = [aDecoder decodeIntForKey:@"map_with_other_model_values_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyMapWithPrimitiveValues = [aDecoder decodeIntForKey:@"map_with_primitive_values_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyNumberProp = [aDecoder decodeIntForKey:@"number_prop_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyOtherModelProp = [aDecoder decodeIntForKey:@"other_model_prop_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyPolymorphicProp = [aDecoder decodeIntForKey:@"polymorphic_prop_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertySetProp = [aDecoder decodeIntForKey:@"set_prop_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertySetPropWithOtherModelValues = [aDecoder decodeIntForKey:@"set_prop_with_other_model_values_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertySetPropWithPrimitiveValues = [aDecoder decodeIntForKey:@"set_prop_with_primitive_values_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertySetPropWithValues = [aDecoder decodeIntForKey:@"set_prop_with_values_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyStringEnum = [aDecoder decodeIntForKey:@"string_enum_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyStringProp = [aDecoder decodeIntForKey:@"string_prop_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyType = [aDecoder decodeIntForKey:@"type_dirty_property"] & 0x1;
    _everythingDirtyProperties.EverythingDirtyPropertyUriProp = [aDecoder decodeIntForKey:@"uri_prop_dirty_property"] & 0x1;
    if ([self class] == [Everything class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(PlankModelInitTypeDefault) }];
    }
    return self;
}
- (void)encodeWithCoder:(NSCoder *)aCoder
{
    [aCoder encodeObject:self.arrayProp forKey:@"array_prop"];
    [aCoder encodeBool:self.booleanProp forKey:@"boolean_prop"];
    [aCoder encodeObject:self.dateProp forKey:@"date_prop"];
    [aCoder encodeInteger:self.intEnum forKey:@"int_enum"];
    [aCoder encodeInteger:self.intProp forKey:@"int_prop"];
    [aCoder encodeObject:self.listPolymorphicValues forKey:@"list_polymorphic_values"];
    [aCoder encodeObject:self.listWithListAndOtherModelValues forKey:@"list_with_list_and_other_model_values"];
    [aCoder encodeObject:self.listWithMapAndOtherModelValues forKey:@"list_with_map_and_other_model_values"];
    [aCoder encodeObject:self.listWithObjectValues forKey:@"list_with_object_values"];
    [aCoder encodeObject:self.listWithOtherModelValues forKey:@"list_with_other_model_values"];
    [aCoder encodeObject:self.listWithPrimitiveValues forKey:@"list_with_primitive_values"];
    [aCoder encodeObject:self.mapPolymorphicValues forKey:@"map_polymorphic_values"];
    [aCoder encodeObject:self.mapProp forKey:@"map_prop"];
    [aCoder encodeObject:self.mapWithListAndOtherModelValues forKey:@"map_with_list_and_other_model_values"];
    [aCoder encodeObject:self.mapWithMapAndOtherModelValues forKey:@"map_with_map_and_other_model_values"];
    [aCoder encodeObject:self.mapWithObjectValues forKey:@"map_with_object_values"];
    [aCoder encodeObject:self.mapWithOtherModelValues forKey:@"map_with_other_model_values"];
    [aCoder encodeObject:self.mapWithPrimitiveValues forKey:@"map_with_primitive_values"];
    [aCoder encodeDouble:self.numberProp forKey:@"number_prop"];
    [aCoder encodeObject:self.otherModelProp forKey:@"other_model_prop"];
    [aCoder encodeObject:self.polymorphicProp forKey:@"polymorphic_prop"];
    [aCoder encodeObject:self.setProp forKey:@"set_prop"];
    [aCoder encodeObject:self.setPropWithOtherModelValues forKey:@"set_prop_with_other_model_values"];
    [aCoder encodeObject:self.setPropWithPrimitiveValues forKey:@"set_prop_with_primitive_values"];
    [aCoder encodeObject:self.setPropWithValues forKey:@"set_prop_with_values"];
    [aCoder encodeInteger:self.stringEnum forKey:@"string_enum"];
    [aCoder encodeObject:self.stringProp forKey:@"string_prop"];
    [aCoder encodeObject:self.type forKey:@"type"];
    [aCoder encodeObject:self.uriProp forKey:@"uri_prop"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyArrayProp forKey:@"array_prop_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyBooleanProp forKey:@"boolean_prop_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyDateProp forKey:@"date_prop_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyIntEnum forKey:@"int_enum_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyIntProp forKey:@"int_prop_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyListPolymorphicValues forKey:@"list_polymorphic_values_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyListWithListAndOtherModelValues forKey:@"list_with_list_and_other_model_values_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyListWithMapAndOtherModelValues forKey:@"list_with_map_and_other_model_values_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyListWithObjectValues forKey:@"list_with_object_values_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyListWithOtherModelValues forKey:@"list_with_other_model_values_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyListWithPrimitiveValues forKey:@"list_with_primitive_values_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyMapPolymorphicValues forKey:@"map_polymorphic_values_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyMapProp forKey:@"map_prop_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyMapWithListAndOtherModelValues forKey:@"map_with_list_and_other_model_values_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyMapWithMapAndOtherModelValues forKey:@"map_with_map_and_other_model_values_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyMapWithObjectValues forKey:@"map_with_object_values_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyMapWithOtherModelValues forKey:@"map_with_other_model_values_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyMapWithPrimitiveValues forKey:@"map_with_primitive_values_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyNumberProp forKey:@"number_prop_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyOtherModelProp forKey:@"other_model_prop_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyPolymorphicProp forKey:@"polymorphic_prop_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertySetProp forKey:@"set_prop_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertySetPropWithOtherModelValues forKey:@"set_prop_with_other_model_values_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertySetPropWithPrimitiveValues forKey:@"set_prop_with_primitive_values_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertySetPropWithValues forKey:@"set_prop_with_values_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyStringEnum forKey:@"string_enum_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyStringProp forKey:@"string_prop_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyType forKey:@"type_dirty_property"];
    [aCoder encodeInt:_everythingDirtyProperties.EverythingDirtyPropertyUriProp forKey:@"uri_prop_dirty_property"];
}
@end

@implementation EverythingBuilder
- (instancetype)initWithModel:(Everything *)modelObject
{
    NSParameterAssert(modelObject);
    if (!(self = [super init])) {
        return self;
    }
    struct EverythingDirtyProperties everythingDirtyProperties = modelObject.everythingDirtyProperties;
    if (everythingDirtyProperties.EverythingDirtyPropertyArrayProp) {
        _arrayProp = modelObject.arrayProp;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyBooleanProp) {
        _booleanProp = modelObject.booleanProp;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyDateProp) {
        _dateProp = modelObject.dateProp;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyIntEnum) {
        _intEnum = modelObject.intEnum;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyIntProp) {
        _intProp = modelObject.intProp;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyListPolymorphicValues) {
        _listPolymorphicValues = modelObject.listPolymorphicValues;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyListWithListAndOtherModelValues) {
        _listWithListAndOtherModelValues = modelObject.listWithListAndOtherModelValues;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyListWithMapAndOtherModelValues) {
        _listWithMapAndOtherModelValues = modelObject.listWithMapAndOtherModelValues;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyListWithObjectValues) {
        _listWithObjectValues = modelObject.listWithObjectValues;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyListWithOtherModelValues) {
        _listWithOtherModelValues = modelObject.listWithOtherModelValues;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyListWithPrimitiveValues) {
        _listWithPrimitiveValues = modelObject.listWithPrimitiveValues;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyMapPolymorphicValues) {
        _mapPolymorphicValues = modelObject.mapPolymorphicValues;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyMapProp) {
        _mapProp = modelObject.mapProp;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyMapWithListAndOtherModelValues) {
        _mapWithListAndOtherModelValues = modelObject.mapWithListAndOtherModelValues;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyMapWithMapAndOtherModelValues) {
        _mapWithMapAndOtherModelValues = modelObject.mapWithMapAndOtherModelValues;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyMapWithObjectValues) {
        _mapWithObjectValues = modelObject.mapWithObjectValues;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyMapWithOtherModelValues) {
        _mapWithOtherModelValues = modelObject.mapWithOtherModelValues;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyMapWithPrimitiveValues) {
        _mapWithPrimitiveValues = modelObject.mapWithPrimitiveValues;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyNumberProp) {
        _numberProp = modelObject.numberProp;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyOtherModelProp) {
        _otherModelProp = modelObject.otherModelProp;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyPolymorphicProp) {
        _polymorphicProp = modelObject.polymorphicProp;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertySetProp) {
        _setProp = modelObject.setProp;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertySetPropWithOtherModelValues) {
        _setPropWithOtherModelValues = modelObject.setPropWithOtherModelValues;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertySetPropWithPrimitiveValues) {
        _setPropWithPrimitiveValues = modelObject.setPropWithPrimitiveValues;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertySetPropWithValues) {
        _setPropWithValues = modelObject.setPropWithValues;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyStringEnum) {
        _stringEnum = modelObject.stringEnum;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyStringProp) {
        _stringProp = modelObject.stringProp;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyType) {
        _type = modelObject.type;
    }
    if (everythingDirtyProperties.EverythingDirtyPropertyUriProp) {
        _uriProp = modelObject.uriProp;
    }
    _everythingDirtyProperties = everythingDirtyProperties;
    return self;
}
- (Everything *)build
{
    return [[Everything alloc] initWithBuilder:self];
}
- (void)mergeWithModel:(Everything *)modelObject
{
    NSParameterAssert(modelObject);
    EverythingBuilder *builder = self;
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyArrayProp) {
        builder.arrayProp = modelObject.arrayProp;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyBooleanProp) {
        builder.booleanProp = modelObject.booleanProp;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyDateProp) {
        builder.dateProp = modelObject.dateProp;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyIntEnum) {
        builder.intEnum = modelObject.intEnum;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyIntProp) {
        builder.intProp = modelObject.intProp;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyListPolymorphicValues) {
        builder.listPolymorphicValues = modelObject.listPolymorphicValues;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyListWithListAndOtherModelValues) {
        builder.listWithListAndOtherModelValues = modelObject.listWithListAndOtherModelValues;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyListWithMapAndOtherModelValues) {
        builder.listWithMapAndOtherModelValues = modelObject.listWithMapAndOtherModelValues;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyListWithObjectValues) {
        builder.listWithObjectValues = modelObject.listWithObjectValues;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyListWithOtherModelValues) {
        builder.listWithOtherModelValues = modelObject.listWithOtherModelValues;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyListWithPrimitiveValues) {
        builder.listWithPrimitiveValues = modelObject.listWithPrimitiveValues;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyMapPolymorphicValues) {
        builder.mapPolymorphicValues = modelObject.mapPolymorphicValues;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyMapProp) {
        builder.mapProp = modelObject.mapProp;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyMapWithListAndOtherModelValues) {
        builder.mapWithListAndOtherModelValues = modelObject.mapWithListAndOtherModelValues;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyMapWithMapAndOtherModelValues) {
        builder.mapWithMapAndOtherModelValues = modelObject.mapWithMapAndOtherModelValues;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyMapWithObjectValues) {
        builder.mapWithObjectValues = modelObject.mapWithObjectValues;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyMapWithOtherModelValues) {
        builder.mapWithOtherModelValues = modelObject.mapWithOtherModelValues;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyMapWithPrimitiveValues) {
        builder.mapWithPrimitiveValues = modelObject.mapWithPrimitiveValues;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyNumberProp) {
        builder.numberProp = modelObject.numberProp;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyOtherModelProp) {
        id value = modelObject.otherModelProp;
        if (value != nil) {
            if (builder.otherModelProp) {
                builder.otherModelProp = [builder.otherModelProp mergeWithModel:value initType:PlankModelInitTypeFromSubmerge];
            } else {
                builder.otherModelProp = value;
            }
        } else {
            builder.otherModelProp = nil;
        }
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyPolymorphicProp) {
        builder.polymorphicProp = modelObject.polymorphicProp;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertySetProp) {
        builder.setProp = modelObject.setProp;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertySetPropWithOtherModelValues) {
        builder.setPropWithOtherModelValues = modelObject.setPropWithOtherModelValues;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertySetPropWithPrimitiveValues) {
        builder.setPropWithPrimitiveValues = modelObject.setPropWithPrimitiveValues;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertySetPropWithValues) {
        builder.setPropWithValues = modelObject.setPropWithValues;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyStringEnum) {
        builder.stringEnum = modelObject.stringEnum;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyStringProp) {
        builder.stringProp = modelObject.stringProp;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyType) {
        builder.type = modelObject.type;
    }
    if (modelObject.everythingDirtyProperties.EverythingDirtyPropertyUriProp) {
        builder.uriProp = modelObject.uriProp;
    }
}
- (void)setArrayProp:(NSArray *)arrayProp
{
    _arrayProp = arrayProp;
    _everythingDirtyProperties.EverythingDirtyPropertyArrayProp = 1;
}
- (void)setBooleanProp:(BOOL)booleanProp
{
    _booleanProp = booleanProp;
    _everythingDirtyProperties.EverythingDirtyPropertyBooleanProp = 1;
}
- (void)setDateProp:(NSDate *)dateProp
{
    _dateProp = [dateProp copy];
    _everythingDirtyProperties.EverythingDirtyPropertyDateProp = 1;
}
- (void)setIntEnum:(EverythingIntEnum)intEnum
{
    _intEnum = intEnum;
    _everythingDirtyProperties.EverythingDirtyPropertyIntEnum = 1;
}
- (void)setIntProp:(NSInteger)intProp
{
    _intProp = intProp;
    _everythingDirtyProperties.EverythingDirtyPropertyIntProp = 1;
}
- (void)setListPolymorphicValues:(NSArray *)listPolymorphicValues
{
    _listPolymorphicValues = listPolymorphicValues;
    _everythingDirtyProperties.EverythingDirtyPropertyListPolymorphicValues = 1;
}
- (void)setListWithListAndOtherModelValues:(NSArray<NSArray<User *> *> *)listWithListAndOtherModelValues
{
    _listWithListAndOtherModelValues = listWithListAndOtherModelValues;
    _everythingDirtyProperties.EverythingDirtyPropertyListWithListAndOtherModelValues = 1;
}
- (void)setListWithMapAndOtherModelValues:(NSArray<NSDictionary<NSString *, User *> *> *)listWithMapAndOtherModelValues
{
    _listWithMapAndOtherModelValues = listWithMapAndOtherModelValues;
    _everythingDirtyProperties.EverythingDirtyPropertyListWithMapAndOtherModelValues = 1;
}
- (void)setListWithObjectValues:(NSArray<NSString *> *)listWithObjectValues
{
    _listWithObjectValues = listWithObjectValues;
    _everythingDirtyProperties.EverythingDirtyPropertyListWithObjectValues = 1;
}
- (void)setListWithOtherModelValues:(NSArray<User *> *)listWithOtherModelValues
{
    _listWithOtherModelValues = listWithOtherModelValues;
    _everythingDirtyProperties.EverythingDirtyPropertyListWithOtherModelValues = 1;
}
- (void)setListWithPrimitiveValues:(NSArray<NSNumber /* Integer */ *> *)listWithPrimitiveValues
{
    _listWithPrimitiveValues = listWithPrimitiveValues;
    _everythingDirtyProperties.EverythingDirtyPropertyListWithPrimitiveValues = 1;
}
- (void)setMapPolymorphicValues:(NSDictionary<NSString *, EverythingMapPolymorphicValues *> *)mapPolymorphicValues
{
    _mapPolymorphicValues = mapPolymorphicValues;
    _everythingDirtyProperties.EverythingDirtyPropertyMapPolymorphicValues = 1;
}
- (void)setMapProp:(NSDictionary *)mapProp
{
    _mapProp = mapProp;
    _everythingDirtyProperties.EverythingDirtyPropertyMapProp = 1;
}
- (void)setMapWithListAndOtherModelValues:(NSDictionary<NSString *, NSArray<User *> *> *)mapWithListAndOtherModelValues
{
    _mapWithListAndOtherModelValues = mapWithListAndOtherModelValues;
    _everythingDirtyProperties.EverythingDirtyPropertyMapWithListAndOtherModelValues = 1;
}
- (void)setMapWithMapAndOtherModelValues:(NSDictionary<NSString *, NSDictionary *> *)mapWithMapAndOtherModelValues
{
    _mapWithMapAndOtherModelValues = mapWithMapAndOtherModelValues;
    _everythingDirtyProperties.EverythingDirtyPropertyMapWithMapAndOtherModelValues = 1;
}
- (void)setMapWithObjectValues:(NSDictionary<NSString *, NSString *> *)mapWithObjectValues
{
    _mapWithObjectValues = mapWithObjectValues;
    _everythingDirtyProperties.EverythingDirtyPropertyMapWithObjectValues = 1;
}
- (void)setMapWithOtherModelValues:(NSDictionary<NSString *, User *> *)mapWithOtherModelValues
{
    _mapWithOtherModelValues = mapWithOtherModelValues;
    _everythingDirtyProperties.EverythingDirtyPropertyMapWithOtherModelValues = 1;
}
- (void)setMapWithPrimitiveValues:(NSDictionary<NSString *, NSNumber /* Integer */ *> *)mapWithPrimitiveValues
{
    _mapWithPrimitiveValues = mapWithPrimitiveValues;
    _everythingDirtyProperties.EverythingDirtyPropertyMapWithPrimitiveValues = 1;
}
- (void)setNumberProp:(double)numberProp
{
    _numberProp = numberProp;
    _everythingDirtyProperties.EverythingDirtyPropertyNumberProp = 1;
}
- (void)setOtherModelProp:(User *)otherModelProp
{
    _otherModelProp = otherModelProp;
    _everythingDirtyProperties.EverythingDirtyPropertyOtherModelProp = 1;
}
- (void)setPolymorphicProp:(EverythingPolymorphicProp *)polymorphicProp
{
    _polymorphicProp = polymorphicProp;
    _everythingDirtyProperties.EverythingDirtyPropertyPolymorphicProp = 1;
}
- (void)setSetProp:(NSSet *)setProp
{
    _setProp = setProp;
    _everythingDirtyProperties.EverythingDirtyPropertySetProp = 1;
}
- (void)setSetPropWithOtherModelValues:(NSSet<User *> *)setPropWithOtherModelValues
{
    _setPropWithOtherModelValues = setPropWithOtherModelValues;
    _everythingDirtyProperties.EverythingDirtyPropertySetPropWithOtherModelValues = 1;
}
- (void)setSetPropWithPrimitiveValues:(NSSet<NSNumber /*> Integer */ *> *)setPropWithPrimitiveValues
{
    _setPropWithPrimitiveValues = setPropWithPrimitiveValues;
    _everythingDirtyProperties.EverythingDirtyPropertySetPropWithPrimitiveValues = 1;
}
- (void)setSetPropWithValues:(NSSet<NSString *> *)setPropWithValues
{
    _setPropWithValues = setPropWithValues;
    _everythingDirtyProperties.EverythingDirtyPropertySetPropWithValues = 1;
}
- (void)setStringEnum:(EverythingStringEnum)stringEnum
{
    _stringEnum = stringEnum;
    _everythingDirtyProperties.EverythingDirtyPropertyStringEnum = 1;
}
- (void)setStringProp:(NSString *)stringProp
{
    _stringProp = [stringProp copy];
    _everythingDirtyProperties.EverythingDirtyPropertyStringProp = 1;
}
- (void)setType:(NSString *)type
{
    _type = [type copy];
    _everythingDirtyProperties.EverythingDirtyPropertyType = 1;
}
- (void)setUriProp:(NSURL *)uriProp
{
    _uriProp = [uriProp copy];
    _everythingDirtyProperties.EverythingDirtyPropertyUriProp = 1;
}
@end
