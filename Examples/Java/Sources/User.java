//
// User.java
// Autogenerated by Plank (https://pinterest.github.io/plank/)
//
// DO NOT EDIT - EDITS WILL BE OVERWRITTEN
// @generated
//

package com.pinterest.models;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.google.gson.Gson;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Date;
import java.util.Map;
import java.util.Objects;

public class User {

    public enum UserEmailFrequency {
        @SerializedName("unset") UNSET, @SerializedName("immediate") IMMEDIATE, @SerializedName("daily") DAILY;
    }

    public static final String TYPE = "user";

    @SerializedName("bio") private @Nullable String bio;
    @SerializedName("counts") private @Nullable Map<String, Integer> counts;
    @SerializedName("created_at") private @Nullable Date createdAt;
    @SerializedName("email_frequency") private @Nullable UserEmailFrequency emailFrequency;
    @SerializedName("first_name") private @Nullable String firstName;
    @SerializedName("id") private @Nullable String uid;
    @SerializedName("image") private @Nullable Image image;
    @SerializedName("last_name") private @Nullable String lastName;
    @SerializedName("type") private @Nullable String type;
    @SerializedName("username") private @Nullable String username;

    private static final int BIO_INDEX = 0;
    private static final int COUNTS_INDEX = 1;
    private static final int CREATED_AT_INDEX = 2;
    private static final int EMAIL_FREQUENCY_INDEX = 3;
    private static final int FIRST_NAME_INDEX = 4;
    private static final int ID_INDEX = 5;
    private static final int IMAGE_INDEX = 6;
    private static final int LAST_NAME_INDEX = 7;
    private static final int TYPE_INDEX = 8;
    private static final int USERNAME_INDEX = 9;

    private boolean[] _bits;

    private User(
        @Nullable String bio,
        @Nullable Map<String, Integer> counts,
        @Nullable Date createdAt,
        @Nullable UserEmailFrequency emailFrequency,
        @Nullable String firstName,
        @Nullable String uid,
        @Nullable Image image,
        @Nullable String lastName,
        @Nullable String type,
        @Nullable String username,
        boolean[] _bits
    ) {
        this.bio = bio;
        this.counts = counts;
        this.createdAt = createdAt;
        this.emailFrequency = emailFrequency;
        this.firstName = firstName;
        this.uid = uid;
        this.image = image;
        this.lastName = lastName;
        this.type = type;
        this.username = username;
        this._bits = _bits;
    }

    @NonNull
    public static User.Builder builder() {
        return new User.Builder();
    }

    @NonNull
    public User.Builder toBuilder() {
        return new User.Builder(this);
    }

    @NonNull
    public User mergeFrom(@NonNull User model) {
        User.Builder builder = this.toBuilder();
        builder.mergeFrom(model);
        return builder.build();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User that = (User) o;
        return Objects.equals(this.emailFrequency, that.emailFrequency) &&
        Objects.equals(this.bio, that.bio) &&
        Objects.equals(this.counts, that.counts) &&
        Objects.equals(this.createdAt, that.createdAt) &&
        Objects.equals(this.firstName, that.firstName) &&
        Objects.equals(this.uid, that.uid) &&
        Objects.equals(this.image, that.image) &&
        Objects.equals(this.lastName, that.lastName) &&
        Objects.equals(this.type, that.type) &&
        Objects.equals(this.username, that.username);
    }

    @Override
    public int hashCode() {
        return Objects.hash(bio,
        counts,
        createdAt,
        emailFrequency,
        firstName,
        uid,
        image,
        lastName,
        type,
        username);
    }

    public @Nullable String getBio() {
        return this.bio;
    }

    public @Nullable Map<String, Integer> getCounts() {
        return this.counts;
    }

    public @Nullable Date getCreatedAt() {
        return this.createdAt;
    }

    public @Nullable UserEmailFrequency getEmailFrequency() {
        return this.emailFrequency;
    }

    public @Nullable String getFirstName() {
        return this.firstName;
    }

    public @Nullable String getUid() {
        return this.uid;
    }

    public @Nullable Image getImage() {
        return this.image;
    }

    public @Nullable String getLastName() {
        return this.lastName;
    }

    public @Nullable String getType() {
        return this.type;
    }

    public @Nullable String getUsername() {
        return this.username;
    }

    public boolean getBioIsSet() {
        return this._bits.length > BIO_INDEX && this._bits[BIO_INDEX];
    }

    public boolean getCountsIsSet() {
        return this._bits.length > COUNTS_INDEX && this._bits[COUNTS_INDEX];
    }

    public boolean getCreatedAtIsSet() {
        return this._bits.length > CREATED_AT_INDEX && this._bits[CREATED_AT_INDEX];
    }

    public boolean getEmailFrequencyIsSet() {
        return this._bits.length > EMAIL_FREQUENCY_INDEX && this._bits[EMAIL_FREQUENCY_INDEX];
    }

    public boolean getFirstNameIsSet() {
        return this._bits.length > FIRST_NAME_INDEX && this._bits[FIRST_NAME_INDEX];
    }

    public boolean getUidIsSet() {
        return this._bits.length > ID_INDEX && this._bits[ID_INDEX];
    }

    public boolean getImageIsSet() {
        return this._bits.length > IMAGE_INDEX && this._bits[IMAGE_INDEX];
    }

    public boolean getLastNameIsSet() {
        return this._bits.length > LAST_NAME_INDEX && this._bits[LAST_NAME_INDEX];
    }

    public boolean getTypeIsSet() {
        return this._bits.length > TYPE_INDEX && this._bits[TYPE_INDEX];
    }

    public boolean getUsernameIsSet() {
        return this._bits.length > USERNAME_INDEX && this._bits[USERNAME_INDEX];
    }

    public static class Builder {

        private @Nullable String bio;
        private @Nullable Map<String, Integer> counts;
        private @Nullable Date createdAt;
        private @Nullable UserEmailFrequency emailFrequency;
        private @Nullable String firstName;
        private @Nullable String uid;
        private @Nullable Image image;
        private @Nullable String lastName;
        private @Nullable String type;
        private @Nullable String username;

        private boolean[] _bits;

        private Builder() {
            this._bits = new boolean[10];
        }

        private Builder(@NonNull User model) {
            this.bio = model.bio;
            this.counts = model.counts;
            this.createdAt = model.createdAt;
            this.emailFrequency = model.emailFrequency;
            this.firstName = model.firstName;
            this.uid = model.uid;
            this.image = model.image;
            this.lastName = model.lastName;
            this.type = model.type;
            this.username = model.username;
            this._bits = model._bits;
        }

        @NonNull
        public Builder setBio(@Nullable String value) {
            this.bio = value;
            if (this._bits.length > BIO_INDEX) {
                this._bits[BIO_INDEX] = true;
            }
            return this;
        }

        @NonNull
        public Builder setCounts(@Nullable Map<String, Integer> value) {
            this.counts = value;
            if (this._bits.length > COUNTS_INDEX) {
                this._bits[COUNTS_INDEX] = true;
            }
            return this;
        }

        @NonNull
        public Builder setCreatedAt(@Nullable Date value) {
            this.createdAt = value;
            if (this._bits.length > CREATED_AT_INDEX) {
                this._bits[CREATED_AT_INDEX] = true;
            }
            return this;
        }

        @NonNull
        public Builder setEmailFrequency(@Nullable UserEmailFrequency value) {
            this.emailFrequency = value;
            if (this._bits.length > EMAIL_FREQUENCY_INDEX) {
                this._bits[EMAIL_FREQUENCY_INDEX] = true;
            }
            return this;
        }

        @NonNull
        public Builder setFirstName(@Nullable String value) {
            this.firstName = value;
            if (this._bits.length > FIRST_NAME_INDEX) {
                this._bits[FIRST_NAME_INDEX] = true;
            }
            return this;
        }

        @NonNull
        public Builder setUid(@Nullable String value) {
            this.uid = value;
            if (this._bits.length > ID_INDEX) {
                this._bits[ID_INDEX] = true;
            }
            return this;
        }

        @NonNull
        public Builder setImage(@Nullable Image value) {
            this.image = value;
            if (this._bits.length > IMAGE_INDEX) {
                this._bits[IMAGE_INDEX] = true;
            }
            return this;
        }

        @NonNull
        public Builder setLastName(@Nullable String value) {
            this.lastName = value;
            if (this._bits.length > LAST_NAME_INDEX) {
                this._bits[LAST_NAME_INDEX] = true;
            }
            return this;
        }

        @NonNull
        public Builder setType(@Nullable String value) {
            this.type = value;
            if (this._bits.length > TYPE_INDEX) {
                this._bits[TYPE_INDEX] = true;
            }
            return this;
        }

        @NonNull
        public Builder setUsername(@Nullable String value) {
            this.username = value;
            if (this._bits.length > USERNAME_INDEX) {
                this._bits[USERNAME_INDEX] = true;
            }
            return this;
        }

        public @Nullable String getBio() {
            return this.bio;
        }

        public @Nullable Map<String, Integer> getCounts() {
            return this.counts;
        }

        public @Nullable Date getCreatedAt() {
            return this.createdAt;
        }

        public @Nullable UserEmailFrequency getEmailFrequency() {
            return this.emailFrequency;
        }

        public @Nullable String getFirstName() {
            return this.firstName;
        }

        public @Nullable String getUid() {
            return this.uid;
        }

        public @Nullable Image getImage() {
            return this.image;
        }

        public @Nullable String getLastName() {
            return this.lastName;
        }

        public @Nullable String getType() {
            return this.type;
        }

        public @Nullable String getUsername() {
            return this.username;
        }

        @NonNull
        public User build() {
            return new User(
            this.bio,
            this.counts,
            this.createdAt,
            this.emailFrequency,
            this.firstName,
            this.uid,
            this.image,
            this.lastName,
            this.type,
            this.username,
            this._bits
            );
        }

        public void mergeFrom(@NonNull User model) {
            if (model._bits.length > BIO_INDEX && model._bits[BIO_INDEX]) {
                this.bio = model.bio;
                this._bits[BIO_INDEX] = true;
            }
            if (model._bits.length > COUNTS_INDEX && model._bits[COUNTS_INDEX]) {
                this.counts = model.counts;
                this._bits[COUNTS_INDEX] = true;
            }
            if (model._bits.length > CREATED_AT_INDEX && model._bits[CREATED_AT_INDEX]) {
                this.createdAt = model.createdAt;
                this._bits[CREATED_AT_INDEX] = true;
            }
            if (model._bits.length > EMAIL_FREQUENCY_INDEX && model._bits[EMAIL_FREQUENCY_INDEX]) {
                this.emailFrequency = model.emailFrequency;
                this._bits[EMAIL_FREQUENCY_INDEX] = true;
            }
            if (model._bits.length > FIRST_NAME_INDEX && model._bits[FIRST_NAME_INDEX]) {
                this.firstName = model.firstName;
                this._bits[FIRST_NAME_INDEX] = true;
            }
            if (model._bits.length > ID_INDEX && model._bits[ID_INDEX]) {
                this.uid = model.uid;
                this._bits[ID_INDEX] = true;
            }
            if (model._bits.length > IMAGE_INDEX && model._bits[IMAGE_INDEX]) {
                this.image = model.image;
                this._bits[IMAGE_INDEX] = true;
            }
            if (model._bits.length > LAST_NAME_INDEX && model._bits[LAST_NAME_INDEX]) {
                this.lastName = model.lastName;
                this._bits[LAST_NAME_INDEX] = true;
            }
            if (model._bits.length > TYPE_INDEX && model._bits[TYPE_INDEX]) {
                this.type = model.type;
                this._bits[TYPE_INDEX] = true;
            }
            if (model._bits.length > USERNAME_INDEX && model._bits[USERNAME_INDEX]) {
                this.username = model.username;
                this._bits[USERNAME_INDEX] = true;
            }
        }
    }

    public static class UserTypeAdapterFactory implements TypeAdapterFactory {

        @Nullable
        @Override
        public <T> TypeAdapter<T> create(@NonNull Gson gson, @NonNull TypeToken<T> typeToken) {
            if (!User.class.isAssignableFrom(typeToken.getRawType())) {
                return null;
            }
            return (TypeAdapter<T>) new UserTypeAdapter(gson);
        }
    }

    private static class UserTypeAdapter extends TypeAdapter<User> {

        private final Gson gson;
        private TypeAdapter<Date> dateTypeAdapter;
        private TypeAdapter<Image> imageTypeAdapter;
        private TypeAdapter<Map<String, Integer>> map_String__Integer_TypeAdapter;
        private TypeAdapter<String> stringTypeAdapter;
        private TypeAdapter<UserEmailFrequency> userEmailFrequencyTypeAdapter;

        UserTypeAdapter(Gson gson) {
            this.gson = gson;
        }

        @Override
        public void write(@NonNull JsonWriter writer, User value) throws IOException {
            if (value == null) {
                writer.nullValue();
                return;
            }
            writer.beginObject();
            if (value._bits.length > BIO_INDEX && value._bits[BIO_INDEX]) {
                if (this.stringTypeAdapter == null) {
                    this.stringTypeAdapter = this.gson.getAdapter(String.class).nullSafe();
                }
                this.stringTypeAdapter.write(writer.name("bio"), value.bio);
            }
            if (value._bits.length > COUNTS_INDEX && value._bits[COUNTS_INDEX]) {
                if (this.map_String__Integer_TypeAdapter == null) {
                    this.map_String__Integer_TypeAdapter = this.gson.getAdapter(new TypeToken<Map<String, Integer>>(){}).nullSafe();
                }
                this.map_String__Integer_TypeAdapter.write(writer.name("counts"), value.counts);
            }
            if (value._bits.length > CREATED_AT_INDEX && value._bits[CREATED_AT_INDEX]) {
                if (this.dateTypeAdapter == null) {
                    this.dateTypeAdapter = this.gson.getAdapter(Date.class).nullSafe();
                }
                this.dateTypeAdapter.write(writer.name("created_at"), value.createdAt);
            }
            if (value._bits.length > EMAIL_FREQUENCY_INDEX && value._bits[EMAIL_FREQUENCY_INDEX]) {
                if (this.userEmailFrequencyTypeAdapter == null) {
                    this.userEmailFrequencyTypeAdapter = this.gson.getAdapter(UserEmailFrequency.class).nullSafe();
                }
                this.userEmailFrequencyTypeAdapter.write(writer.name("email_frequency"), value.emailFrequency);
            }
            if (value._bits.length > FIRST_NAME_INDEX && value._bits[FIRST_NAME_INDEX]) {
                if (this.stringTypeAdapter == null) {
                    this.stringTypeAdapter = this.gson.getAdapter(String.class).nullSafe();
                }
                this.stringTypeAdapter.write(writer.name("first_name"), value.firstName);
            }
            if (value._bits.length > ID_INDEX && value._bits[ID_INDEX]) {
                if (this.stringTypeAdapter == null) {
                    this.stringTypeAdapter = this.gson.getAdapter(String.class).nullSafe();
                }
                this.stringTypeAdapter.write(writer.name("id"), value.uid);
            }
            if (value._bits.length > IMAGE_INDEX && value._bits[IMAGE_INDEX]) {
                if (this.imageTypeAdapter == null) {
                    this.imageTypeAdapter = this.gson.getAdapter(Image.class).nullSafe();
                }
                this.imageTypeAdapter.write(writer.name("image"), value.image);
            }
            if (value._bits.length > LAST_NAME_INDEX && value._bits[LAST_NAME_INDEX]) {
                if (this.stringTypeAdapter == null) {
                    this.stringTypeAdapter = this.gson.getAdapter(String.class).nullSafe();
                }
                this.stringTypeAdapter.write(writer.name("last_name"), value.lastName);
            }
            if (value._bits.length > TYPE_INDEX && value._bits[TYPE_INDEX]) {
                if (this.stringTypeAdapter == null) {
                    this.stringTypeAdapter = this.gson.getAdapter(String.class).nullSafe();
                }
                this.stringTypeAdapter.write(writer.name("type"), value.type);
            }
            if (value._bits.length > USERNAME_INDEX && value._bits[USERNAME_INDEX]) {
                if (this.stringTypeAdapter == null) {
                    this.stringTypeAdapter = this.gson.getAdapter(String.class).nullSafe();
                }
                this.stringTypeAdapter.write(writer.name("username"), value.username);
            }
            writer.endObject();
        }

        @Nullable
        @Override
        public User read(@NonNull JsonReader reader) throws IOException {
            if (reader.peek() == JsonToken.NULL) {
                reader.nextNull();
                return null;
            }
            Builder builder = User.builder();
            reader.beginObject();
            while (reader.hasNext()) {
                String name = reader.nextName();
                switch (name) {
                    case ("bio"):
                        if (this.stringTypeAdapter == null) {
                            this.stringTypeAdapter = this.gson.getAdapter(String.class).nullSafe();
                        }
                        builder.setBio(this.stringTypeAdapter.read(reader));
                        break;
                    case ("counts"):
                        if (this.map_String__Integer_TypeAdapter == null) {
                            this.map_String__Integer_TypeAdapter = this.gson.getAdapter(new TypeToken<Map<String, Integer>>(){}).nullSafe();
                        }
                        builder.setCounts(this.map_String__Integer_TypeAdapter.read(reader));
                        break;
                    case ("created_at"):
                        if (this.dateTypeAdapter == null) {
                            this.dateTypeAdapter = this.gson.getAdapter(Date.class).nullSafe();
                        }
                        builder.setCreatedAt(this.dateTypeAdapter.read(reader));
                        break;
                    case ("email_frequency"):
                        if (this.userEmailFrequencyTypeAdapter == null) {
                            this.userEmailFrequencyTypeAdapter = this.gson.getAdapter(UserEmailFrequency.class).nullSafe();
                        }
                        builder.setEmailFrequency(this.userEmailFrequencyTypeAdapter.read(reader));
                        break;
                    case ("first_name"):
                        if (this.stringTypeAdapter == null) {
                            this.stringTypeAdapter = this.gson.getAdapter(String.class).nullSafe();
                        }
                        builder.setFirstName(this.stringTypeAdapter.read(reader));
                        break;
                    case ("id"):
                        if (this.stringTypeAdapter == null) {
                            this.stringTypeAdapter = this.gson.getAdapter(String.class).nullSafe();
                        }
                        builder.setUid(this.stringTypeAdapter.read(reader));
                        break;
                    case ("image"):
                        if (this.imageTypeAdapter == null) {
                            this.imageTypeAdapter = this.gson.getAdapter(Image.class).nullSafe();
                        }
                        builder.setImage(this.imageTypeAdapter.read(reader));
                        break;
                    case ("last_name"):
                        if (this.stringTypeAdapter == null) {
                            this.stringTypeAdapter = this.gson.getAdapter(String.class).nullSafe();
                        }
                        builder.setLastName(this.stringTypeAdapter.read(reader));
                        break;
                    case ("type"):
                        if (this.stringTypeAdapter == null) {
                            this.stringTypeAdapter = this.gson.getAdapter(String.class).nullSafe();
                        }
                        builder.setType(this.stringTypeAdapter.read(reader));
                        break;
                    case ("username"):
                        if (this.stringTypeAdapter == null) {
                            this.stringTypeAdapter = this.gson.getAdapter(String.class).nullSafe();
                        }
                        builder.setUsername(this.stringTypeAdapter.read(reader));
                        break;
                    default:
                        reader.skipValue();
                }
            }
            reader.endObject();
            return builder.build();
        }
    }
}
