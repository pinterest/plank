//
//  JSFileGenerator.swift
//  plank
//
//  Created by Michael Schneider
//
//

import Foundation

struct JSFileGenerator: FileGeneratorManager {
    static func filesToGenerate(descriptor: SchemaObjectRoot, generatorParameters: GenerationParameters) -> [FileGenerator] {

        let rootsRenderer = JSModelRenderer(rootSchema: descriptor, params: generatorParameters)

        return [
            JSModelFile(roots: rootsRenderer.renderRoots(), className: descriptor.className(with: generatorParameters))
        ]
    }

    static func runtimeFiles() -> [FileGenerator] {
        return [JSRuntimeFile()]
    }
}

struct JSModelFile: FileGenerator {
    let roots: [JSIR.Root]
    let className: String

    var fileName: String {
        return "\(className)Type.js"
    }

    func renderFile() -> String {
        return (
            [self.renderCommentHeader()] +
            self.roots.map { $0.renderImplementation().joined(separator: "\n") }
        )
        .map { $0.trimmingCharacters(in: CharacterSet.whitespaces) }
        .filter { $0 != "" }
        .joined(separator: "\n\n")
    }
}

extension JSModelFile {
    func renderCommentHeader() -> String {
        let header = [
            "//  @flow",
            "//",
            "//  \(self.fileName)",
            "//  Autogenerated by plank",
            "//",
            "//  DO NOT EDIT - EDITS WILL BE OVERWRITTEN",
            "//  @generated",
            "//"
        ]

        return header.joined(separator: "\n")
    }
}
